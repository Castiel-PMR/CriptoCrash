{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CryptoLiquidations Dashboard\n\n## Overview\n\nCryptoLiquidations is a real-time cryptocurrency liquidation monitoring application that visualizes liquidation events from cryptocurrency exchanges through an interactive canvas-based interface. The application provides live streaming of liquidation data via WebSocket connections and displays market statistics with animated visual effects. Users can monitor long and short liquidation positions across various cryptocurrencies with real-time updates and market sentiment analysis.\n\n## Recent Changes (August 2025)\n\n### Performance and Animation Optimizations\n- **Reduced animation speeds by 2-2.5x** for comfortable viewing experience (small liquidations: 2.0px/s, large: 0.6px/s)\n- **Fixed chart opacity affecting animation speed bug** by implementing ref-based state management for chartOpacity and showGrid\n- **Added page visibility API integration** to prevent animation buildup when tab is hidden - only real-time liquidations (max 10 seconds old) are displayed\n- **Optimized chart rendering** with independent opacity controls that don't trigger animation function recreation\n\n### User Interface Improvements  \n- **Settings moved to modal window** instead of canvas overlay for cleaner interface\n- **Chart transparency controls** working independently from animation system\n- **Grid toggle functionality** accessible through Settings modal\n- **Professional monochrome chart styling** with hollow/filled candlesticks for clear background appearance\n- **Simplified to single cannon system** - removed right cannon, left cannon handles all targets\n- **Smart destruction range** - cannon targets bags in lower 55% of screen, giving users chance for manual destruction\n- **Random firing pattern** - 70% chance to fire at bags in range for more dynamic gameplay\n\n### Money Bag Visual Design - STABLE VERSION (August 15, 2025)\n- **Finalized money bag design** - simple rounded rectangle bags with classic gradient styling\n- **Brown bags for long liquidations, green bags for short liquidations** with radial gradient shading\n- **Text formatting optimized** - removed dollar sign for better readability, shows only coin symbol (BTC, ETH) and amount\n- **Enhanced text size and positioning** - coin symbol at 22% of bag width, amount at 20% of bag width\n- **Clean typography** - JetBrains Mono font with black outline and white/gold fill for maximum readability\n- **Proper text positioning** - all text stays within bag boundaries, no overflow\n- **Simple rope tie detail** with brown color and elliptical neck design\n\n### Historical Cannon System - STABLE VERSION (August 15, 2025)\n- **Completely redesigned cannon in 17-18th century style** - replaced futuristic turret with historical design\n- **Wooden carriage with bronze barrel** - authentic period appearance with wood grain texture and bronze/brass coloring\n- **Large spoked wheels with realistic rotation** - 8-spoke wooden wheels that rotate correctly based on movement direction\n- **Full-width movement system** - cannon travels from edge to near mute button with increased speed (1.0 units/frame)\n- **Directional wheel physics** - wheels rotate forward when moving right, backward when moving left\n- **Historical cannonballs** - replaced laser beams with iron cannonballs featuring metallic gradient and highlight\n- **Period-appropriate muzzle flash** - orange/yellow gunpowder flash instead of sci-fi effects\n- **Realistic cannon sound** - deep boom with dual oscillators (60Hz base + 400Hz crack) for authentic artillery sound\n- **Dynamic positioning** - automatically adjusts movement range based on canvas width\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: Radix UI components with shadcn/ui design system\n- **Styling**: Tailwind CSS with custom cyber-themed color palette and CSS variables\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Real-time Communication**: Native WebSocket API for live liquidation feeds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Structure**: RESTful endpoints with WebSocket server integration\n- **Real-time Services**: Custom LiquidationService class managing WebSocket connections\n- **Data Processing**: In-memory storage for recent liquidations and market statistics\n\n### Data Layer\n- **Database ORM**: Drizzle ORM configured for PostgreSQL\n- **Database**: PostgreSQL with Neon serverless driver\n- **Schema Management**: Centralized schema definitions in shared directory\n- **Data Storage**: Hybrid approach using both database persistence and in-memory caching for real-time data\n\n### Canvas Rendering System\n- **Graphics**: HTML5 Canvas API for high-performance animations\n- **Animation Engine**: Custom animation system with particle effects and physics simulation\n- **Performance**: RAF-based rendering loop with optimized draw calls\n- **Visual Effects**: Dynamic liquidation blocks with explosion animations and particle systems\n\n### Component Architecture\n- **Design System**: Modular component library with consistent theming\n- **Layout**: Responsive design with fixed header and full-screen canvas\n- **Data Visualization**: Custom charts and progress indicators for market sentiment\n- **Real-time Updates**: Component-level WebSocket integration with automatic reconnection\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting for persistent data storage\n- **Connection Pooling**: Built-in connection management through Neon serverless driver\n\n### Cryptocurrency Data Sources\n- **Binance WebSocket**: Real-time liquidation feeds from Binance exchange\n- **CoinGlass API**: Market data and liquidation statistics polling\n- **Exchange Integration**: Configurable multi-exchange data aggregation\n\n### Development Tools\n- **Replit Integration**: Native Replit development environment support\n- **Vite Plugins**: Hot module replacement and development server enhancements\n- **Build System**: ESBuild for production server bundling\n\n### UI and Styling\n- **Radix UI**: Accessible component primitives for complex UI interactions\n- **Tailwind CSS**: Utility-first styling with custom design tokens\n- **Google Fonts**: Inter, Georgia, and JetBrains Mono font families\n- **Lucide Icons**: Consistent iconography throughout the application\n\n### Performance and Monitoring\n- **Error Handling**: Runtime error overlays in development environment\n- **WebSocket Management**: Automatic reconnection and connection state monitoring\n- **Memory Management**: Circular buffer implementation for liquidation history","size_bytes":6842},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: [\"Inter\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"JetBrains Mono\", \"monospace\"],\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        \"cyber-dark\": \"var(--cyber-dark)\",\n        \"cyber-gray\": \"var(--cyber-gray)\",\n        \"cyber-border\": \"var(--cyber-border)\",\n        \"long-red\": \"var(--long-red)\",\n        \"short-green\": \"var(--short-green)\",\n        \"accent-blue\": \"var(--accent-blue)\",\n        \"accent-yellow\": \"var(--accent-yellow)\",\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"grid-move\": {\n          \"0%\": { backgroundPosition: \"0 0\" },\n          \"100%\": { backgroundPosition: \"50px 50px\" },\n        },\n        \"pulse-slow\": {\n          \"0%, 100%\": { opacity: \"1\" },\n          \"50%\": { opacity: \"0.5\" },\n        },\n        \"bounce-subtle\": {\n          \"0%, 100%\": { transform: \"translateY(0)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"grid-move\": \"grid-move 20s linear infinite\",\n        \"pulse-slow\": \"pulse-slow 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"bounce-subtle\": \"bounce-subtle 2s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3669},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer } from \"ws\";\nimport { LiquidationService } from \"./services/liquidationService\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // Create WebSocket server on /ws path\n  const wss = new WebSocketServer({ \n    server: httpServer, \n    path: '/ws'\n  });\n\n  // Initialize liquidation service\n  const liquidationService = new LiquidationService(wss);\n\n  // REST API endpoints\n  app.get('/api/liquidations/recent', (req, res) => {\n    try {\n      const recentLiquidations = liquidationService.getRecentLiquidations();\n      res.json({ success: true, data: recentLiquidations });\n    } catch (error) {\n      console.error('Error fetching recent liquidations:', error);\n      res.status(500).json({ success: false, error: 'Failed to fetch liquidations' });\n    }\n  });\n\n  app.get('/api/market/stats', (req, res) => {\n    try {\n      const stats = liquidationService.getMarketStats();\n      res.json({ success: true, data: stats });\n    } catch (error) {\n      console.error('Error fetching market stats:', error);\n      res.status(500).json({ success: false, error: 'Failed to fetch market stats' });\n    }\n  });\n\n  app.get('/api/health', (req, res) => {\n    res.json({ \n      success: true, \n      message: 'Liquidation service is running',\n      timestamp: Date.now()\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":1482},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\nexport const liquidationSchema = z.object({\n  id: z.string(),\n  timestamp: z.number(),\n  symbol: z.string(),\n  exchange: z.string(),\n  side: z.enum(['buy', 'sell', 'long', 'short']),\n  size: z.number(),\n  price: z.number(),\n  value: z.number(),\n});\n\nexport const marketStatsSchema = z.object({\n  totalLongs: z.number(),\n  totalShorts: z.number(),\n  activeLiquidations: z.number(),\n  longShortRatio: z.object({\n    longs: z.number(),\n    shorts: z.number(),\n  }),\n  volumeHistory: z.array(z.object({\n    timestamp: z.number(),\n    longs: z.number(),\n    shorts: z.number(),\n  })),\n});\n\nexport type Liquidation = z.infer<typeof liquidationSchema>;\nexport type MarketStats = z.infer<typeof marketStatsSchema>;\n\nexport interface LiquidationBlock {\n  id: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  velocity: number;\n  rotation: number;\n  rotationSpeed: number;\n  coin: string;\n  isLong: boolean;\n  amount: number;\n  price: number;\n  opacity: number;\n  isExploding: boolean;\n  explosionTime: number;\n  isCaught: boolean;\n}\n\nexport interface Platform {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  score: number;\n  totalCaught: number;\n}\n\nexport interface Particle {\n  id: string;\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  life: number;\n  decay: number;\n  color: string;\n  size: number;\n}\n","size_bytes":1368},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport LiquidationDashboard from \"@/pages/LiquidationDashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={LiquidationDashboard}/>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":746},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 4%);\n  --foreground: hsl(0, 0%, 100%);\n  --card: hsl(0, 0%, 6.7%);\n  --card-foreground: hsl(0, 0%, 85.1%);\n  --popover: hsl(0, 0%, 4%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --primary: hsl(214, 78%, 57%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(0, 0%, 91.2%);\n  --secondary-foreground: hsl(210, 25%, 7.8%);\n  --muted: hsl(0, 0%, 9.4%);\n  --muted-foreground: hsl(210, 4%, 46.3%);\n  --accent: hsl(214, 78%, 57%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 10.2%);\n  --input: hsl(208, 28%, 18.4%);\n  --ring: hsl(214, 78%, 57%);\n  --chart-1: hsl(214, 78%, 57%);\n  --chart-2: hsl(159, 100%, 36.1%);\n  --chart-3: hsl(42, 93%, 56.3%);\n  --chart-4: hsl(147, 79%, 41.9%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 6.7%);\n  --sidebar-foreground: hsl(0, 0%, 85.1%);\n  --sidebar-primary: hsl(214, 78%, 57%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(214, 78%, 57%);\n  --sidebar-accent-foreground: hsl(0, 0%, 100%);\n  --sidebar-border: hsl(205, 25%, 26.1%);\n  --sidebar-ring: hsl(214, 78%, 57%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: 0.5rem;\n  --cyber-dark: hsl(0, 0%, 3.9%);\n  --cyber-gray: hsl(0, 0%, 6.7%);\n  --cyber-border: hsl(0, 0%, 10.2%);\n  --long-red: hsl(0, 84%, 60%);\n  --short-green: hsl(159, 68%, 51%);\n  --accent-blue: hsl(214, 78%, 57%);\n  --accent-yellow: hsl(42, 93%, 56.3%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 7%, 91.2%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85.1%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 7%, 91.2%);\n  --primary: hsl(204, 88%, 52.5%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15%, 95%);\n  --secondary-foreground: hsl(210, 25%, 7.8%);\n  --muted: hsl(0, 0%, 9.4%);\n  --muted-foreground: hsl(210, 4%, 46.3%);\n  --accent: hsl(206, 70%, 7.8%);\n  --accent-foreground: hsl(204, 88%, 52.5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5%, 14.9%);\n  --input: hsl(208, 28%, 18.4%);\n  --ring: hsl(214, 78%, 57%);\n  --chart-1: hsl(214, 78%, 57%);\n  --chart-2: hsl(159, 100%, 36.1%);\n  --chart-3: hsl(42, 93%, 56.3%);\n  --chart-4: hsl(147, 79%, 41.9%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(228, 10%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.1%);\n  --sidebar-primary: hsl(214, 78%, 57%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(206, 70%, 7.8%);\n  --sidebar-accent-foreground: hsl(204, 88%, 52.5%);\n  --sidebar-border: hsl(206, 16%, 26.1%);\n  --sidebar-ring: hsl(214, 78%, 57%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: linear-gradient(135deg, var(--cyber-dark) 0%, var(--cyber-gray) 50%, var(--cyber-dark) 100%);\n    overflow: hidden;\n  }\n}\n\n@layer components {\n\n  \n  .impact-zone {\n    background: linear-gradient(0deg, rgba(59, 130, 246, 0.2) 0%, transparent 100%);\n    border-top: 2px solid rgba(59, 130, 246, 0.5);\n  }\n  \n  .stats-glow {\n    text-shadow: 0 0 10px currentColor;\n  }\n\n  .slider::-webkit-slider-thumb {\n    appearance: none;\n    height: 16px;\n    width: 16px;\n    border-radius: 50%;\n    background: var(--accent-blue);\n    cursor: pointer;\n    border: 2px solid var(--cyber-border);\n  }\n\n  .slider::-moz-range-thumb {\n    height: 16px;\n    width: 16px;\n    border-radius: 50%;\n    background: var(--accent-blue);\n    cursor: pointer;\n    border: 2px solid var(--cyber-border);\n  }\n}\n\n@layer utilities {\n  .cyber-dark {\n    color: var(--cyber-dark);\n  }\n  \n  .cyber-gray {\n    color: var(--cyber-gray);\n  }\n  \n  .cyber-border {\n    color: var(--cyber-border);\n  }\n  \n  .long-red {\n    color: var(--long-red);\n  }\n  \n  .short-green {\n    color: var(--short-green);\n  }\n  \n  .accent-blue {\n    color: var(--accent-blue);\n  }\n  \n  .accent-yellow {\n    color: var(--accent-yellow);\n  }\n\n  .bg-cyber-dark {\n    background-color: var(--cyber-dark);\n  }\n  \n  .bg-cyber-gray {\n    background-color: var(--cyber-gray);\n  }\n  \n  .bg-long-red {\n    background-color: var(--long-red);\n  }\n  \n  .bg-short-green {\n    background-color: var(--short-green);\n  }\n  \n  .bg-accent-blue {\n    background-color: var(--accent-blue);\n  }\n  \n  .bg-accent-yellow {\n    background-color: var(--accent-yellow);\n  }\n\n  .border-cyber-border {\n    border-color: var(--cyber-border);\n  }\n  \n  .text-cyber-dark {\n    color: var(--cyber-dark);\n  }\n  \n  .text-cyber-gray {\n    color: var(--cyber-gray);\n  }\n  \n  .text-long-red {\n    color: var(--long-red);\n  }\n  \n  .text-short-green {\n    color: var(--short-green);\n  }\n  \n  .text-accent-blue {\n    color: var(--accent-blue);\n  }\n  \n  .text-accent-yellow {\n    color: var(--accent-yellow);\n  }\n}\n\n\n\n@keyframes pulse-slow {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n@keyframes bounce-subtle {\n  0%, 100% { transform: translateY(0); }\n  50% { transform: translateY(-10px); }\n}\n\n.animate-pulse-slow {\n  animation: pulse-slow 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.animate-bounce-subtle {\n  animation: bounce-subtle 2s ease-in-out infinite;\n}\n","size_bytes":5490},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/liquidationService.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Liquidation, MarketStats } from '@shared/schema';\n\nexport class LiquidationService {\n  private clients: Set<WebSocket> = new Set();\n  private binanceWs: WebSocket | null = null;\n  private marketStats: MarketStats = {\n    totalLongs: 0,\n    totalShorts: 0,\n    activeLiquidations: 0,\n    longShortRatio: { longs: 0, shorts: 0 },\n    volumeHistory: [],\n  };\n  private recentLiquidations: Liquidation[] = [];\n\n  constructor(private wss: WebSocketServer) {\n    this.setupWebSocketServer();\n    this.connectToBinance();\n    this.startCoinGlassPolling();\n    this.startStatsUpdates();\n  }\n\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: WebSocket) => {\n      console.log('Client connected to liquidation feed');\n      this.clients.add(ws);\n\n      // Send current stats immediately\n      ws.send(JSON.stringify({\n        type: 'marketStats',\n        data: this.marketStats\n      }));\n\n      // Send recent liquidations\n      ws.send(JSON.stringify({\n        type: 'recentLiquidations',\n        data: this.recentLiquidations.slice(-10)\n      }));\n\n      ws.on('close', () => {\n        this.clients.delete(ws);\n        console.log('Client disconnected from liquidation feed');\n      });\n\n      ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n        this.clients.delete(ws);\n      });\n    });\n  }\n\n  private connectToBinance() {\n    const binanceUrl = 'wss://fstream.binance.com/ws/!forceOrder@arr';\n    \n    try {\n      this.binanceWs = new WebSocket(binanceUrl);\n\n      this.binanceWs.on('open', () => {\n        console.log('Connected to Binance liquidation stream');\n      });\n\n      this.binanceWs.on('message', (data: Buffer) => {\n        try {\n          const message = JSON.parse(data.toString());\n          if (message.o) {\n            const liquidation = this.parseBinanceLiquidation(message.o);\n            this.processLiquidation(liquidation);\n          }\n        } catch (error) {\n          console.error('Error parsing Binance message:', error);\n        }\n      });\n\n      this.binanceWs.on('error', (error) => {\n        console.error('Binance WebSocket error:', error);\n        setTimeout(() => this.connectToBinance(), 5000);\n      });\n\n      this.binanceWs.on('close', () => {\n        console.log('Binance connection closed, reconnecting...');\n        setTimeout(() => this.connectToBinance(), 5000);\n      });\n    } catch (error) {\n      console.error('Failed to connect to Binance:', error);\n      setTimeout(() => this.connectToBinance(), 5000);\n    }\n  }\n\n  private parseBinanceLiquidation(data: any): Liquidation {\n    return {\n      id: `${data.E}-${data.s}-${Math.random()}`,\n      timestamp: data.E,\n      symbol: data.s,\n      exchange: 'binance',\n      side: data.S === 'SELL' ? 'long' : 'short',\n      size: parseFloat(data.q),\n      price: parseFloat(data.p),\n      value: parseFloat(data.q) * parseFloat(data.p),\n    };\n  }\n\n  private async startCoinGlassPolling() {\n    const pollCoinGlass = async () => {\n      try {\n        const response = await fetch('https://open-api.coinglass.com/public/v2/liquidation_history?interval=1m&limit=50');\n        const data = await response.json();\n        \n        if (data.data && Array.isArray(data.data)) {\n          data.data.forEach((item: any) => {\n            // Process both long and short liquidations\n            if (item.longLiquidationUsd > 1000) {\n              const liquidation: Liquidation = {\n                id: `coinglass-long-${item.createTime}-${item.symbol}`,\n                timestamp: item.createTime,\n                symbol: item.symbol,\n                exchange: 'coinglass',\n                side: 'long',\n                size: item.longLiquidationUsd / item.price,\n                price: item.price,\n                value: item.longLiquidationUsd,\n              };\n              this.processLiquidation(liquidation);\n            }\n\n            if (item.shortLiquidationUsd > 1000) {\n              const liquidation: Liquidation = {\n                id: `coinglass-short-${item.createTime}-${item.symbol}`,\n                timestamp: item.createTime,\n                symbol: item.symbol,\n                exchange: 'coinglass',\n                side: 'short',\n                size: item.shortLiquidationUsd / item.price,\n                price: item.price,\n                value: item.shortLiquidationUsd,\n              };\n              this.processLiquidation(liquidation);\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching CoinGlass data:', error);\n      }\n    };\n\n    // Poll every 30 seconds\n    setInterval(pollCoinGlass, 30000);\n    pollCoinGlass(); // Initial call\n  }\n\n  private processLiquidation(liquidation: Liquidation) {\n    // Add to recent liquidations\n    this.recentLiquidations.push(liquidation);\n    if (this.recentLiquidations.length > 100) {\n      this.recentLiquidations.shift();\n    }\n\n    // Update stats\n    if (liquidation.side === 'long') {\n      this.marketStats.totalLongs += liquidation.value;\n      this.marketStats.longShortRatio.longs++;\n    } else {\n      this.marketStats.totalShorts += liquidation.value;\n      this.marketStats.longShortRatio.shorts++;\n    }\n\n    this.marketStats.activeLiquidations++;\n\n    // Broadcast to all clients\n    this.broadcast({\n      type: 'liquidation',\n      data: liquidation\n    });\n  }\n\n  private startStatsUpdates() {\n    setInterval(() => {\n      // Update volume history\n      const now = Date.now();\n      const recentLongs = this.recentLiquidations\n        .filter(l => l.side === 'long' && now - l.timestamp < 3600000)\n        .reduce((sum, l) => sum + l.value, 0);\n      \n      const recentShorts = this.recentLiquidations\n        .filter(l => l.side === 'short' && now - l.timestamp < 3600000)\n        .reduce((sum, l) => sum + l.value, 0);\n\n      this.marketStats.volumeHistory.push({\n        timestamp: now,\n        longs: recentLongs,\n        shorts: recentShorts,\n      });\n\n      if (this.marketStats.volumeHistory.length > 24) {\n        this.marketStats.volumeHistory.shift();\n      }\n\n      // Reset active count periodically\n      this.marketStats.activeLiquidations = Math.max(0, this.marketStats.activeLiquidations - 5);\n\n      // Broadcast updated stats\n      this.broadcast({\n        type: 'marketStats',\n        data: this.marketStats\n      });\n    }, 5000);\n  }\n\n  private broadcast(message: any) {\n    const data = JSON.stringify(message);\n    this.clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(data);\n      }\n    });\n  }\n\n  public getRecentLiquidations() {\n    return this.recentLiquidations.slice(-50);\n  }\n\n  public getMarketStats() {\n    return this.marketStats;\n  }\n}\n","size_bytes":6759},"client/src/components/LiquidationCanvas.tsx":{"content":"import React, { useRef, useEffect, useState, useCallback, useMemo } from 'react';\nimport { Liquidation, Platform } from '@shared/schema';\nimport { LiquidationBlock, Particle, AnimationState, Cannon, Cannonball } from '../types/liquidation';\n\ninterface LiquidationCanvasProps {\n  liquidations: Liquidation[];\n  isPaused: boolean;\n  chartOpacity?: number;\n}\n\ninterface ExtendedAnimationState extends AnimationState {\n  platform: Platform;\n  leftCannon: Cannon;\n  rightCannon: Cannon;\n  cannonballs: Cannonball[];\n}\n\nexport function LiquidationCanvas({ \n  liquidations, \n  isPaused, \n  chartOpacity = 100 \n}: LiquidationCanvasProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationStateRef = useRef<ExtendedAnimationState>({\n    liquidations: [],\n    particles: [],\n    animationSpeed: 1,\n    isPaused: false,\n    lastTime: 0,\n    platform: {\n      x: 0,\n      y: 0,\n      width: 150,\n      height: 20,\n      score: 0,\n      totalCaught: 0,\n    },\n    leftCannon: {\n      x: 50,\n      y: 0,\n      angle: 0,\n      isFiring: false,\n      fireProgress: 0,\n      targetBag: null,\n      side: 'left',\n      movingRight: true,\n      speed: 1.0,\n      minX: 30,\n      maxX: 0, // Will be set dynamically based on canvas width\n      wheelRotation: 0,\n    },\n    rightCannon: {\n      x: 0, // Will be set when canvas is available\n      y: 0,\n      angle: 0,\n      isFiring: false,\n      fireProgress: 0,\n      targetBag: null,\n      side: 'right',\n    },\n    cannonballs: [],\n  });\n\n  const processedLiquidations = useRef(new Set<string>());\n  const lastVisibleTime = useRef<number>(Date.now());\n  const chartOpacityRef = useRef<number>(chartOpacity);\n  const componentStartTime = useRef<number>(Date.now()); // Track when component started\n\n\n  // Update refs when props change\n  useEffect(() => {\n    chartOpacityRef.current = chartOpacity;\n  }, [chartOpacity]);\n\n  const [canvasSize, setCanvasSize] = useState({ width: 0, height: 0 });\n  const [showFlashText, setShowFlashText] = useState(false);\n  const [isFlashing, setIsFlashing] = useState(false);\n  const [isSoundMuted, setIsSoundMuted] = useState(false);\n\n  // Audio context ref for consistent sound\n  const audioContextRef = useRef<AudioContext | null>(null);\n  \n  // Initialize audio context on first user interaction\n  const initAudioContext = useCallback(() => {\n    if (!audioContextRef.current) {\n      try {\n        audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n      } catch (error) {\n        console.log('Audio not supported');\n      }\n    }\n  }, []);\n\n  // Cannon sound effect\n  const playCannonSound = useCallback((isLeftCannon: boolean) => {\n    if (isSoundMuted) return; // Skip sound if muted\n    \n    // Initialize audio context if needed\n    if (!audioContextRef.current) {\n      initAudioContext();\n    }\n    \n    if (!audioContextRef.current) return;\n    \n    try {\n      // Resume context if suspended (browser autoplay policy)\n      if (audioContextRef.current.state === 'suspended') {\n        audioContextRef.current.resume();\n      }\n      \n      // Create a realistic cannon boom sound\n      const gainNode = audioContextRef.current.createGain();\n      const oscillator1 = audioContextRef.current.createOscillator();\n      const oscillator2 = audioContextRef.current.createOscillator();\n      \n      // Deep boom base frequency\n      oscillator1.type = 'triangle';\n      oscillator1.frequency.setValueAtTime(60, audioContextRef.current.currentTime);\n      oscillator1.frequency.exponentialRampToValueAtTime(30, audioContextRef.current.currentTime + 0.5);\n      \n      // Higher frequency for crack/snap\n      oscillator2.type = 'square';\n      oscillator2.frequency.setValueAtTime(400, audioContextRef.current.currentTime);\n      oscillator2.frequency.exponentialRampToValueAtTime(50, audioContextRef.current.currentTime + 0.2);\n      \n      // Volume envelope - sharp attack, slow decay\n      gainNode.gain.setValueAtTime(0, audioContextRef.current.currentTime);\n      gainNode.gain.linearRampToValueAtTime(0.3, audioContextRef.current.currentTime + 0.02);\n      gainNode.gain.exponentialRampToValueAtTime(0.1, audioContextRef.current.currentTime + 0.1);\n      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContextRef.current.currentTime + 0.8);\n      \n      // Connect both oscillators\n      oscillator1.connect(gainNode);\n      oscillator2.connect(gainNode);\n      gainNode.connect(audioContextRef.current.destination);\n      \n      oscillator1.start(audioContextRef.current.currentTime);\n      oscillator2.start(audioContextRef.current.currentTime);\n      oscillator1.stop(audioContextRef.current.currentTime + 0.8);\n      oscillator2.stop(audioContextRef.current.currentTime + 0.2);\n    } catch (error) {\n      console.log('Audio playback failed:', error);\n    }\n  }, [isSoundMuted, initAudioContext]);\n\n  // Effect for text flashing animation\n  useEffect(() => {\n    if (showFlashText) {\n      setIsFlashing(true);\n      const flashInterval = setInterval(() => {\n        setIsFlashing(prev => !prev);\n      }, 300); // Flashing every 300ms\n\n      return () => clearInterval(flashInterval);\n    } else {\n      setIsFlashing(false);\n    }\n  }, [showFlashText]);\n\n  // Update canvas size\n  const updateCanvasSize = useCallback(() => {\n    if (!canvasRef.current) return;\n    \n    // Получаем размер родительского контейнера, а не всего окна\n    const parent = canvasRef.current.parentElement;\n    if (!parent) return;\n    \n    const rect = parent.getBoundingClientRect();\n    const width = rect.width;\n    const height = rect.height;\n    \n    setCanvasSize({ width, height });\n    \n    canvasRef.current.width = width;\n    canvasRef.current.height = height;\n    \n    // Initialize platform position\n    const state = animationStateRef.current;\n    state.platform.x = width / 2 - state.platform.width / 2;\n    state.platform.y = height - 40;\n  }, []);\n\n\n\n\n\n  useEffect(() => {\n    updateCanvasSize();\n    window.addEventListener('resize', updateCanvasSize);\n    return () => window.removeEventListener('resize', updateCanvasSize);\n  }, [updateCanvasSize]);\n\n  // Handle page visibility to prevent accumulated liquidations\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        // When page becomes visible, update the last visible time\n        lastVisibleTime.current = Date.now();\n        \n        // Don't clear processed liquidations to prevent duplicates\n        // Just clear existing animations that might have accumulated\n        const state = animationStateRef.current;\n        state.liquidations = [];\n        state.particles = [];\n        \n        console.log('Page visible - cleared accumulated liquidations');\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n\n  // Create liquidation block from data\n  const createLiquidationBlock = useCallback((liquidation: Liquidation): LiquidationBlock => {\n    const canvas = canvasRef.current;\n    if (!canvas) throw new Error('Canvas not available');\n\n    // Calculate size based on liquidation value (more dramatic scaling)\n    const value = liquidation.value;\n    let size;\n    \n    // Ещё более медленная система скоростей для спокойного просмотра\n    let baseVelocity;\n    if (value < 5000) {\n      size = 60; // Очень маленькие\n      baseVelocity = 1.2; // Замедлил ещё больше до 1.2\n    } else if (value < 15000) {\n      size = 80; // Маленькие  \n      baseVelocity = 1.0; // Замедлил ещё больше до 1.0\n    } else if (value < 50000) {\n      size = 100; // Средние\n      baseVelocity = 0.9; // Замедлил ещё больше до 0.9\n    } else if (value < 100000) {\n      size = 130; // Средне-большие\n      baseVelocity = 0.8; // Замедлил ещё больше до 0.8\n    } else if (value < 500000) {\n      size = 160; // Большие\n      baseVelocity = 0.6; // Замедлил ещё больше до 0.6\n    } else if (value < 1000000) {\n      size = 200; // Очень большие\n      baseVelocity = 0.5; // Замедлил ещё больше до 0.5\n    } else {\n      size = 250; // Огромные\n      baseVelocity = 0.4; // Замедлил ещё больше до 0.4\n    }\n\n    console.log(`Liquidation: $${value.toFixed(0)} -> Size: ${size}px, Speed: ${baseVelocity.toFixed(2)}`);;\n\n    return {\n      id: liquidation.id,\n      x: Math.random() * (canvas.width - size),\n      y: -size,\n      width: size,\n      height: size * 0.8, // Money bag proportions\n      velocity: baseVelocity,\n      rotation: 0,\n      rotationSpeed: 0, // No rotation for money bags\n      coin: liquidation.symbol.replace('USDT', '').replace('USD', ''),\n      isLong: liquidation.side === 'long',\n      amount: liquidation.value,\n      price: liquidation.price,\n      opacity: 1,\n      isExploding: false,\n      explosionTime: 0,\n      isCaught: false,\n    };\n  }, []);\n\n  // Create coin particle for explosion\n  const createParticle = useCallback((x: number, y: number, isLong: boolean): Particle => {\n    return {\n      id: Math.random().toString(),\n      x,\n      y,\n      vx: (Math.random() - 0.5) * 12, // Faster spread for coin explosion\n      vy: (Math.random() - 0.5) * 10 - 4, // More upward velocity\n      life: 1,\n      decay: Math.random() * 0.015 + 0.008, // Longer lasting coins\n      color: '#ffd700', // Gold color for coins\n      size: Math.random() * 6 + 4, // Slightly bigger coins\n    };\n  }, []);\n\n  // Create special particle for clicked bags with 10 different explosion types\n  const createClickParticle = useCallback((x: number, y: number, isLong: boolean, explosionType: number): Particle => {\n    let colors, speed, size, decay, vx, vy;\n    \n    switch (explosionType) {\n      case 0: // Fireworks - яркие разноцветные искры\n        colors = ['#FF0040', '#FF4000', '#FFFF00', '#40FF00', '#0040FF', '#8000FF'];\n        speed = 25;\n        size = Math.random() * 8 + 3;\n        decay = 0.008;\n        vx = (Math.random() - 0.5) * speed;\n        vy = (Math.random() - 0.5) * speed;\n        break;\n        \n      case 1: // Star burst - звездообразный взрыв\n        colors = ['#FFD700', '#FFA500', '#FF6347'];\n        speed = 15;\n        size = Math.random() * 12 + 4;\n        decay = 0.012;\n        const angle = (Math.PI * 2 / 8) * Math.floor(Math.random() * 8);\n        vx = Math.cos(angle) * speed;\n        vy = Math.sin(angle) * speed;\n        break;\n        \n      case 2: // Spiral explosion - спиральный взрыв\n        colors = ['#00FFFF', '#0080FF', '#8000FF'];\n        speed = 18;\n        size = Math.random() * 6 + 2;\n        decay = 0.015;\n        const spiralAngle = Math.random() * Math.PI * 4;\n        const radius = Math.random() * speed;\n        vx = Math.cos(spiralAngle) * radius;\n        vy = Math.sin(spiralAngle) * radius;\n        break;\n        \n      case 3: // Heart explosion - сердечки\n        colors = ['#FF1493', '#FF69B4', '#FF91A4'];\n        speed = 12;\n        size = Math.random() * 10 + 6;\n        decay = 0.01;\n        vx = (Math.random() - 0.5) * speed;\n        vy = (Math.random() - 0.5) * speed - 5; // Немного вверх\n        break;\n        \n      case 4: // Lightning - молнии\n        colors = ['#FFFF00', '#FFFFFF', '#FFFF80'];\n        speed = 30;\n        size = Math.random() * 15 + 2;\n        decay = 0.025;\n        vx = (Math.random() - 0.5) * speed;\n        vy = (Math.random() - 0.5) * speed;\n        break;\n        \n      case 5: // Rainbow explosion - радуга\n        colors = ['#FF0000', '#FF8000', '#FFFF00', '#00FF00', '#0000FF', '#8000FF'];\n        speed = 16;\n        size = Math.random() * 8 + 4;\n        decay = 0.008;\n        vx = (Math.random() - 0.5) * speed;\n        vy = (Math.random() - 0.5) * speed;\n        break;\n        \n      case 6: // Shockwave - ударная волна\n        colors = ['#FFFFFF', '#C0C0C0', '#808080'];\n        speed = 22;\n        size = Math.random() * 20 + 5;\n        decay = 0.02;\n        const shockAngle = Math.random() * Math.PI * 2;\n        vx = Math.cos(shockAngle) * speed;\n        vy = Math.sin(shockAngle) * speed;\n        break;\n        \n      case 7: // Flower petals - лепестки цветов\n        colors = ['#FFB6C1', '#FFC0CB', '#FF69B4', '#DA70D6'];\n        speed = 10;\n        size = Math.random() * 12 + 8;\n        decay = 0.006;\n        vx = (Math.random() - 0.5) * speed;\n        vy = (Math.random() - 0.5) * speed - 3;\n        break;\n        \n      case 8: // Ice crystals - ледяные кристаллы\n        colors = ['#87CEEB', '#ADD8E6', '#B0E0E6', '#FFFFFF'];\n        speed = 14;\n        size = Math.random() * 9 + 3;\n        decay = 0.01;\n        vx = (Math.random() - 0.5) * speed;\n        vy = (Math.random() - 0.5) * speed;\n        break;\n        \n      case 9: // Fire explosion - огненный взрыв\n        colors = ['#FF4500', '#FF6347', '#FF8C00', '#FFD700'];\n        speed = 20;\n        size = Math.random() * 14 + 6;\n        decay = 0.018;\n        vx = (Math.random() - 0.5) * speed;\n        vy = (Math.random() - 0.5) * speed - 8; // Огонь идет вверх\n        break;\n        \n      default:\n        colors = ['#FF0080'];\n        speed = 15;\n        size = 5;\n        decay = 0.01;\n        vx = 0;\n        vy = 0;\n    }\n    \n    return {\n      id: Math.random().toString(),\n      x,\n      y,\n      vx,\n      vy,\n      life: 1,\n      decay,\n      color: colors[Math.floor(Math.random() * colors.length)],\n      size,\n    };\n  }, []);\n\n  // Mouse click handling\n  const handleCanvasClick = useCallback((e: MouseEvent) => {\n    if (!canvasRef.current) return;\n    \n    // Initialize audio context on first user interaction\n    initAudioContext();\n    \n    const rect = canvasRef.current.getBoundingClientRect();\n    const clickX = e.clientX - rect.left;\n    const clickY = e.clientY - rect.top;\n    \n    // Check if click is on mute button (bottom right corner)\n    const buttonSize = 40;\n    const buttonX = canvasRef.current.width - buttonSize - 15;\n    const buttonY = canvasRef.current.height - buttonSize - 15;\n    \n    if (clickX >= buttonX && clickX <= buttonX + buttonSize && \n        clickY >= buttonY && clickY <= buttonY + buttonSize) {\n      setIsSoundMuted(prev => !prev);\n      return;\n    }\n    \n    const state = animationStateRef.current;\n    \n    // Check if click hit any money bag\n    for (let i = 0; i < state.liquidations.length; i++) {\n      const bag = state.liquidations[i];\n      \n      if (!bag.isExploding && \n          clickX >= bag.x && clickX <= bag.x + bag.width &&\n          clickY >= bag.y && clickY <= bag.y + bag.height) {\n        \n        // Create click explosion immediately\n        bag.isExploding = true;\n        bag.explosionTime = 0;\n        \n        // Choose random explosion type (0-9)\n        const explosionType = Math.floor(Math.random() * 10);\n        \n        // Create special click explosion particles with random animation\n        const particleCount = Math.min(50, Math.floor(bag.width / 2));\n        for (let j = 0; j < particleCount; j++) {\n          state.particles.push(createClickParticle(\n            bag.x + bag.width / 2,\n            bag.y + bag.height / 2,\n            bag.isLong,\n            explosionType\n          ));\n        }\n        \n        // Remove the bag from array since it's clicked\n        state.liquidations.splice(i, 1);\n        break; // Only explode one bag per click\n      }\n    }\n  }, [createClickParticle, isSoundMuted, initAudioContext]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      canvas.addEventListener('click', handleCanvasClick, { passive: false });\n      return () => canvas.removeEventListener('click', handleCanvasClick);\n    }\n  }, [handleCanvasClick]);\n\n  // Update liquidation block\n  const updateLiquidationBlock = useCallback((block: LiquidationBlock, deltaTime: number): boolean => {\n    const canvas = canvasRef.current;\n    if (!canvas) return false;\n\n    if (block.isExploding) {\n      block.explosionTime += deltaTime;\n      block.opacity = Math.max(0, 1 - block.explosionTime / 500);\n      return block.explosionTime < 500;\n    }\n\n    // Постоянная физика с базовой скоростью мешочка (независимо от FPS)\n    block.y += block.velocity * (deltaTime / 16.67); // Нормализуем к 60 FPS (16.67ms на кадр)\n    block.rotation += block.rotationSpeed;\n\n    // Check if bag is in cannon's destruction range (from bottom to middle-lower part)\n    const cannonRange = canvas.height * 0.70; // Range from bottom to 70% of screen height (gives chance for manual destruction)\n    const bottomLimit = canvas.height * 0.95; // Don't let bags reach the very bottom\n    \n    // Fire at random positions within the cannon range, not immediately at crossing\n    if (block.y + block.height >= cannonRange && block.y + block.height <= bottomLimit) {\n      const state = animationStateRef.current;\n      const leftCannon = state.leftCannon;\n      \n      // Progressive firing probability - higher chance closer to bottom\n      const bagProgress = (block.y + block.height - cannonRange) / (bottomLimit - cannonRange);\n      const baseProbability = 0.0005; // Very low base chance\n      const progressMultiplier = 1 + bagProgress * 4; // Up to 5x higher chance near bottom\n      const shouldFire = Math.random() < (baseProbability * progressMultiplier);\n      \n      // Fire left cannon only if it's not currently firing and random chance succeeds\n      if (!leftCannon.isFiring && shouldFire) {\n        const bagCenterX = block.x + block.width / 2;\n        const bagCenterY = block.y + block.height / 2;\n        \n        // Only use left cannon now\n        const activeCannon = leftCannon;\n        \n        // Calculate angle and fire\n        const dx = bagCenterX - activeCannon.x;\n        const dy = bagCenterY - activeCannon.y;\n        activeCannon.angle = Math.atan2(dy, dx);\n        activeCannon.isFiring = true;\n        activeCannon.fireProgress = 0;\n        activeCannon.targetBag = block.id;\n        \n        // Create laser beam\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        const speed = 8;\n        state.cannonballs.push({\n          x: activeCannon.x,\n          y: activeCannon.y,\n          vx: (dx / distance) * speed,\n          vy: (dy / distance) * speed,\n          targetBagId: block.id,\n          life: 300,\n        });\n        \n        // Play cannon sound effect\n        playCannonSound(activeCannon.side === 'left');\n      }\n    }\n\n    // Check if hit by cannonball\n    const state = animationStateRef.current;\n    for (let i = 0; i < state.cannonballs.length; i++) {\n      const ball = state.cannonballs[i];\n      if (ball.targetBagId === block.id) {\n        const dx = ball.x - (block.x + block.width / 2);\n        const dy = ball.y - (block.y + block.height / 2);\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance < block.width / 2 + 8) { // Ball radius is 8\n          // Remove the cannonball\n          state.cannonballs.splice(i, 1);\n          \n          // Use same explosion as mouse click with random type\n          const explosionType = Math.floor(Math.random() * 10) + 1;\n          block.isExploding = true;\n          block.explosionTime = 0;\n          block.explosionType = explosionType;\n          \n          // Create particles with same count as click explosion using random explosion type\n          const particleCount = Math.min(50, Math.floor(block.width / 2) + 10);\n          for (let j = 0; j < particleCount; j++) {\n            state.particles.push(createClickParticle(\n              block.x + block.width / 2,\n              block.y + block.height / 2,\n              block.isLong,\n              explosionType\n            ));\n          }\n          \n          return true;\n        }\n      }\n    }\n\n    // Check if hit bottom without being shot\n    if (block.y + block.height >= canvas.height - 60) {\n      block.isExploding = true;\n      block.explosionTime = 0;\n\n      // Create smaller particles for missed bags\n      const particleCount = Math.min(15, Math.floor(block.width / 5));\n      for (let i = 0; i < particleCount; i++) {\n        state.particles.push(createParticle(\n          block.x + block.width / 2,\n          block.y + block.height / 2,\n          block.isLong\n        ));\n      }\n      \n      return true;\n    }\n\n    return block.y < canvas.height + block.height;\n  }, [createParticle, playCannonSound]);\n\n  // Update particle\n  const updateParticle = useCallback((particle: Particle, deltaTime: number): boolean => {\n    const frameMultiplier = deltaTime / 16.67; // Нормализуем к 60 FPS\n    particle.x += particle.vx * frameMultiplier;\n    particle.y += particle.vy * frameMultiplier;\n    particle.vy += 0.1 * frameMultiplier; // Gravity\n    particle.life -= particle.decay * frameMultiplier;\n    particle.size *= Math.pow(0.98, frameMultiplier);\n    \n    return particle.life > 0;\n  }, []);\n\n  // Update cannon (only left one)\n  const updateCannons = useCallback((canvasWidth: number, canvasHeight: number, deltaTime: number): void => {\n    const state = animationStateRef.current;\n    \n    // Set dynamic max position near mute button (leave 100px space for button)\n    const dynamicMaxX = canvasWidth - 120;\n    if (state.leftCannon.maxX === 0) {\n      state.leftCannon.maxX = dynamicMaxX;\n    }\n    \n    // Move cannon horizontally along bottom border\n    const frameMultiplier = deltaTime / 16.67;\n    const speed = state.leftCannon.speed || 1.0;\n    \n    let movementDirection = 0;\n    if (state.leftCannon.movingRight) {\n      state.leftCannon.x += speed * frameMultiplier;\n      movementDirection = 1;\n      if (state.leftCannon.x >= dynamicMaxX) {\n        state.leftCannon.movingRight = false;\n      }\n    } else {\n      state.leftCannon.x -= speed * frameMultiplier;\n      movementDirection = -1;\n      if (state.leftCannon.x <= (state.leftCannon.minX || 30)) {\n        state.leftCannon.movingRight = true;\n      }\n    }\n    \n    // Rotate wheels based on movement direction (realistic wheel rotation)\n    const wheelRadius = 15;\n    const distancePerFrame = speed * frameMultiplier;\n    const rotationPerFrame = (distancePerFrame / wheelRadius) * movementDirection;\n    state.leftCannon.wheelRotation = (state.leftCannon.wheelRotation || 0) + rotationPerFrame;\n    \n    // Position cannon slightly raised from bottom\n    state.leftCannon.y = canvasHeight - 50;\n    \n    // Update firing animation for left cannon only\n    if (state.leftCannon.isFiring) {\n      state.leftCannon.fireProgress += deltaTime * 0.02;\n      \n      if (state.leftCannon.fireProgress >= 1) {\n        state.leftCannon.isFiring = false;\n        state.leftCannon.fireProgress = 0;\n        state.leftCannon.targetBag = null;\n      }\n    }\n  }, []);\n\n  // Create cannonball\n  const createCannonball = useCallback((cannon: Cannon, targetX: number, targetY: number, bagId: string): Cannonball => {\n    const dx = targetX - cannon.x;\n    const dy = targetY - cannon.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    const speed = 8;\n    \n    return {\n      x: cannon.x,\n      y: cannon.y,\n      vx: (dx / distance) * speed,\n      vy: (dy / distance) * speed,\n      targetBagId: bagId,\n      life: 300, // 5 seconds at 60fps\n    };\n  }, []);\n\n\n\n  // Update cannonballs\n  const updateCannonballs = useCallback((deltaTime: number): void => {\n    const state = animationStateRef.current;\n    \n    state.cannonballs = state.cannonballs.filter(ball => {\n      ball.x += ball.vx;\n      ball.y += ball.vy;\n      ball.life -= deltaTime;\n      \n      return ball.life > 0;\n    });\n  }, []);\n\n  // Draw money bag without dollar sign for better readability\n  const drawLiquidationBlock = useCallback((ctx: CanvasRenderingContext2D, block: LiquidationBlock) => {\n    ctx.save();\n    ctx.globalAlpha = block.opacity;\n    ctx.translate(block.x + block.width / 2, block.y + block.height / 2);\n\n    const bagWidth = block.width;\n    const bagHeight = block.height;\n    const neckHeight = bagHeight * 0.15;\n    \n    // Main bag body (rounded rectangle)\n    ctx.beginPath();\n    ctx.roundRect(-bagWidth/2, -bagHeight/2 + neckHeight, bagWidth, bagHeight - neckHeight, bagWidth * 0.1);\n    \n    // Gradient fill\n    const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, bagWidth/2);\n    if (block.isLong) {\n      gradient.addColorStop(0, '#8B4513'); // Brown for long liquidations\n      gradient.addColorStop(0.7, '#654321');\n      gradient.addColorStop(1, '#3C2415');\n      ctx.shadowColor = '#ef4444';\n    } else {\n      gradient.addColorStop(0, '#228B22'); // Green for short liquidations\n      gradient.addColorStop(0.7, '#1F5F1F');\n      gradient.addColorStop(1, '#0D2B0D');\n      ctx.shadowColor = '#10b981';\n    }\n    \n    ctx.shadowBlur = 8;\n    ctx.fillStyle = gradient;\n    ctx.fill();\n    \n    // Bag neck/tie\n    ctx.beginPath();\n    ctx.ellipse(0, -bagHeight/2 + neckHeight/2, bagWidth * 0.3, neckHeight, 0, 0, Math.PI * 2);\n    ctx.fillStyle = block.isLong ? '#654321' : '#1F5F1F';\n    ctx.fill();\n    \n    // Rope/string on neck\n    ctx.strokeStyle = '#8B4513';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.ellipse(0, -bagHeight/2 + neckHeight/2, bagWidth * 0.32, neckHeight * 1.1, 0, 0, Math.PI * 2);\n    ctx.stroke();\n\n    // Text with better readability - no dollar sign\n    ctx.shadowBlur = 0;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    // Coin symbol with outline (top position) - bigger font but fits in bag\n    const coinFontSize = Math.max(14, bagWidth * 0.22);\n    ctx.font = `bold ${coinFontSize}px JetBrains Mono, monospace`;\n    ctx.strokeStyle = '#000000';\n    ctx.lineWidth = 2;\n    ctx.strokeText(block.coin, 0, -bagHeight * 0.05);\n    ctx.fillStyle = '#FFD700';\n    ctx.fillText(block.coin, 0, -bagHeight * 0.05);\n\n    // Amount text with outline for better readability - bigger font\n    const amountFontSize = Math.max(13, bagWidth * 0.2);\n    ctx.font = `bold ${amountFontSize}px JetBrains Mono, monospace`;\n    let formattedAmount;\n    if (block.amount >= 1000000) {\n      formattedAmount = (block.amount / 1000000).toFixed(1) + 'M';\n    } else if (block.amount >= 1000) {\n      formattedAmount = (block.amount / 1000).toFixed(0) + 'K';\n    } else {\n      formattedAmount = block.amount.toFixed(0);\n    }\n    ctx.strokeStyle = '#000000';\n    ctx.lineWidth = 2;\n    ctx.strokeText(formattedAmount, 0, bagHeight * 0.25);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fillText(formattedAmount, 0, bagHeight * 0.25);\n\n    ctx.restore();\n  }, []);\n\n  // Draw particle with different shapes based on color/type\n  const drawParticle = useCallback((ctx: CanvasRenderingContext2D, particle: Particle) => {\n    ctx.save();\n    ctx.globalAlpha = particle.life;\n    \n    // Determine particle type by color\n    const isGoldCoin = particle.color === '#FFD700' || particle.color === '#ffd700';\n    \n    if (isGoldCoin) {\n      // Original gold coin for floor impacts\n      ctx.fillStyle = '#FFD700';\n      ctx.shadowColor = '#FFD700';\n      ctx.shadowBlur = 5;\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n      ctx.fill();\n      \n      ctx.strokeStyle = '#FFA500';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n      \n      if (particle.size > 3) {\n        ctx.shadowBlur = 0;\n        ctx.fillStyle = '#B8860B';\n        ctx.font = `bold ${particle.size}px JetBrains Mono, monospace`;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText('$', particle.x, particle.y);\n      }\n    } else {\n      // Special effects for click explosions\n      ctx.fillStyle = particle.color;\n      ctx.shadowColor = particle.color;\n      ctx.shadowBlur = 8;\n      \n      // Different shapes for different effects\n      if (particle.color.includes('FF1493') || particle.color.includes('FF69B4')) {\n        // Heart shape for pink particles\n        const size = particle.size;\n        ctx.beginPath();\n        ctx.moveTo(particle.x, particle.y + size/4);\n        ctx.bezierCurveTo(particle.x, particle.y, particle.x - size/2, particle.y, particle.x - size/2, particle.y + size/4);\n        ctx.bezierCurveTo(particle.x - size/2, particle.y + size/2, particle.x, particle.y + size/2, particle.x, particle.y + size);\n        ctx.bezierCurveTo(particle.x, particle.y + size/2, particle.x + size/2, particle.y + size/2, particle.x + size/2, particle.y + size/4);\n        ctx.bezierCurveTo(particle.x + size/2, particle.y, particle.x, particle.y, particle.x, particle.y + size/4);\n        ctx.fill();\n      } else if (particle.color.includes('FFD700') || particle.color.includes('FFA500')) {\n        // Star shape for golden particles\n        const size = particle.size;\n        const spikes = 5;\n        const outerRadius = size;\n        const innerRadius = size * 0.5;\n        let rot = Math.PI / 2 * 3;\n        const step = Math.PI / spikes;\n        \n        ctx.beginPath();\n        ctx.moveTo(particle.x, particle.y - outerRadius);\n        for (let i = 0; i < spikes; i++) {\n          const x = particle.x + Math.cos(rot) * outerRadius;\n          const y = particle.y + Math.sin(rot) * outerRadius;\n          ctx.lineTo(x, y);\n          rot += step;\n          \n          const x2 = particle.x + Math.cos(rot) * innerRadius;\n          const y2 = particle.y + Math.sin(rot) * innerRadius;\n          ctx.lineTo(x2, y2);\n          rot += step;\n        }\n        ctx.lineTo(particle.x, particle.y - outerRadius);\n        ctx.fill();\n      } else if (particle.color.includes('FFFFFF') || particle.color.includes('C0C0C0')) {\n        // Ring shape for shockwave\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        ctx.lineWidth = Math.max(1, particle.size / 4);\n        ctx.strokeStyle = particle.color;\n        ctx.stroke();\n      } else if (particle.color.includes('87CEEB') || particle.color.includes('ADD8E6')) {\n        // Diamond shape for ice crystals\n        const size = particle.size;\n        ctx.beginPath();\n        ctx.moveTo(particle.x, particle.y - size);\n        ctx.lineTo(particle.x + size, particle.y);\n        ctx.lineTo(particle.x, particle.y + size);\n        ctx.lineTo(particle.x - size, particle.y);\n        ctx.closePath();\n        ctx.fill();\n      } else {\n        // Default circle for other effects\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n    \n    ctx.restore();\n  }, []);\n\n  // Draw cannon in historical 17-18 century style\n  const drawCannon = useCallback((ctx: CanvasRenderingContext2D, cannon: Cannon) => {\n    ctx.save();\n    ctx.translate(cannon.x, cannon.y);\n    \n    // Base wooden carriage platform \n    const woodGradient = ctx.createLinearGradient(0, 10, 0, 35);\n    woodGradient.addColorStop(0, '#8B4513');\n    woodGradient.addColorStop(0.5, '#A0522D');\n    woodGradient.addColorStop(1, '#654321');\n    \n    ctx.fillStyle = woodGradient;\n    ctx.fillRect(-35, 10, 70, 25);\n    \n    // Wood grain texture\n    ctx.strokeStyle = '#654321';\n    ctx.lineWidth = 1;\n    ctx.globalAlpha = 0.6;\n    for (let i = 0; i < 3; i++) {\n      ctx.beginPath();\n      ctx.moveTo(-30, 15 + i * 5);\n      ctx.lineTo(30, 15 + i * 5);\n      ctx.stroke();\n    }\n    ctx.globalAlpha = 1;\n    \n    // Large wooden wheels\n    const wheelGradient = ctx.createRadialGradient(0, 0, 5, 0, 0, 15);\n    wheelGradient.addColorStop(0, '#8B4513');\n    wheelGradient.addColorStop(1, '#654321');\n    \n    // Left wheel\n    ctx.fillStyle = wheelGradient;\n    ctx.beginPath();\n    ctx.arc(-25, 35, 15, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Right wheel  \n    ctx.beginPath();\n    ctx.arc(25, 35, 15, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Wheel spokes (8 spokes each) - with rotation\n    ctx.strokeStyle = '#4A2C17';\n    ctx.lineWidth = 2;\n    const wheelRotation = cannon.wheelRotation || 0;\n    \n    for (let wheel of [-25, 25]) {\n      ctx.save();\n      ctx.translate(wheel, 35);\n      ctx.rotate(wheelRotation);\n      \n      for (let i = 0; i < 8; i++) {\n        const angle = (i * Math.PI) / 4;\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(Math.cos(angle) * 12, Math.sin(angle) * 12);\n        ctx.stroke();\n      }\n      \n      ctx.restore();\n      \n      // Hub\n      ctx.fillStyle = '#4A2C17';\n      ctx.beginPath();\n      ctx.arc(wheel, 35, 4, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    \n    // Cannon trunnions (side mounting points)\n    ctx.fillStyle = '#B8860B';\n    ctx.beginPath();\n    ctx.arc(0, 5, 3, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Barrel rotation based on firing state\n    let barrelAngle = cannon.isFiring ? cannon.angle : 0;\n    \n    ctx.save();\n    ctx.rotate(barrelAngle);\n    \n    // Main cannon barrel (bronze/brass with historical taper)\n    const barrelGradient = ctx.createLinearGradient(0, -10, 0, 10);\n    barrelGradient.addColorStop(0, '#CD7F32');\n    barrelGradient.addColorStop(0.3, '#DAA520');\n    barrelGradient.addColorStop(0.7, '#B8860B');\n    barrelGradient.addColorStop(1, '#8B6914');\n    \n    ctx.fillStyle = barrelGradient;\n    \n    // Tapered barrel shape (wider at breech, narrower at muzzle)\n    ctx.beginPath();\n    ctx.moveTo(-5, -10);\n    ctx.lineTo(45, -7);\n    ctx.lineTo(50, -6);\n    ctx.lineTo(50, 6);\n    ctx.lineTo(45, 7);\n    ctx.lineTo(-5, 10);\n    ctx.closePath();\n    ctx.fill();\n    \n    // Reinforcement bands (typical of period cannons)\n    ctx.fillStyle = '#8B6914';\n    ctx.fillRect(5, -10, 4, 20);\n    ctx.fillRect(20, -9, 3, 18);\n    ctx.fillRect(35, -8, 3, 16);\n    \n    // Decorative moldings\n    ctx.strokeStyle = '#654321';\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.moveTo(0, -8);\n    ctx.lineTo(45, -6);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(0, 8);\n    ctx.lineTo(45, 6);\n    ctx.stroke();\n    \n    // Muzzle end (darker, worn look)\n    ctx.fillStyle = '#654321';\n    ctx.fillRect(47, -6, 3, 12);\n    \n    // Touch hole for ignition\n    ctx.fillStyle = '#2F1B14';\n    ctx.beginPath();\n    ctx.arc(-2, 0, 2, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Muzzle flash when firing (orange/yellow period-appropriate flash)\n    if (cannon.isFiring && cannon.fireProgress < 0.4) {\n      const flashAlpha = (1 - cannon.fireProgress * 2.5);\n      \n      // Outer flash\n      ctx.fillStyle = '#FFA500';\n      ctx.globalAlpha = flashAlpha * 0.6;\n      ctx.beginPath();\n      ctx.arc(55, 0, 20, 0, Math.PI * 2);\n      ctx.fill();\n      \n      // Middle flash\n      ctx.fillStyle = '#FF6347';\n      ctx.globalAlpha = flashAlpha * 0.8;\n      ctx.beginPath();\n      ctx.arc(53, 0, 12, 0, Math.PI * 2);\n      ctx.fill();\n      \n      // Core flash\n      ctx.fillStyle = '#FFFF00';\n      ctx.globalAlpha = flashAlpha;\n      ctx.beginPath();\n      ctx.arc(51, 0, 6, 0, Math.PI * 2);\n      ctx.fill();\n      \n      ctx.globalAlpha = 1;\n    }\n    \n    ctx.restore();\n    \n    ctx.restore();\n  }, []);\n\n  // Draw cannonball (historical iron ball)\n  const drawCannonball = useCallback((ctx: CanvasRenderingContext2D, ball: Cannonball) => {\n    ctx.save();\n    \n    // Iron cannonball with gradient for 3D effect\n    const ballGradient = ctx.createRadialGradient(ball.x - 2, ball.y - 2, 0, ball.x, ball.y, 6);\n    ballGradient.addColorStop(0, '#8C7853');\n    ballGradient.addColorStop(0.4, '#6B5B73');\n    ballGradient.addColorStop(1, '#2F2F2F');\n    \n    ctx.fillStyle = ballGradient;\n    ctx.beginPath();\n    ctx.arc(ball.x, ball.y, 6, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Dark outline for definition\n    ctx.strokeStyle = '#1A1A1A';\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.arc(ball.x, ball.y, 6, 0, Math.PI * 2);\n    ctx.stroke();\n    \n    // Small highlight for metallic sheen\n    ctx.fillStyle = '#C0C0C0';\n    ctx.globalAlpha = 0.6;\n    ctx.beginPath();\n    ctx.arc(ball.x - 2, ball.y - 2, 2, 0, Math.PI * 2);\n    ctx.fill();\n    \n    ctx.globalAlpha = 1;\n    ctx.restore();\n  }, []);\n\n  // Real Bitcoin candlestick data from Binance with animation state\n  const [bitcoinCandles, setBitcoinCandles] = useState<any[]>([]);\n  const [lastUpdateTime, setLastUpdateTime] = useState<number>(0);\n  const [timeframe, setTimeframe] = useState<string>('30m');\n  \n  // Timeframe options\n  const timeframeOptions = [\n    { value: '1m', label: '1м', limit: 60 },\n    { value: '5m', label: '5м', limit: 60 },\n    { value: '15m', label: '15м', limit: 48 },\n    { value: '30m', label: '30м', limit: 48 },\n    { value: '1h', label: '1ч', limit: 24 },\n    { value: '4h', label: '4ч', limit: 24 },\n    { value: '1d', label: '1д', limit: 30 }\n  ];\n  \n  // Fetch real Bitcoin data\n  useEffect(() => {\n    const fetchBitcoinData = async () => {\n      try {\n        const selectedTimeframe = timeframeOptions.find(tf => tf.value === timeframe);\n        const limit = selectedTimeframe?.limit || 48;\n        \n        // Get candlestick data based on selected timeframe\n        const response = await fetch(`https://data-api.binance.vision/api/v3/klines?symbol=BTCUSDT&interval=${timeframe}&limit=${limit}`);\n        const data = await response.json();\n        \n        // Convert to OHLCV format\n        const candles = data.map((kline: any[]) => ({\n          timestamp: kline[0],\n          open: parseFloat(kline[1]),\n          high: parseFloat(kline[2]),\n          low: parseFloat(kline[3]),\n          close: parseFloat(kline[4]),\n          volume: parseFloat(kline[5])\n        }));\n        \n        setBitcoinCandles(candles);\n        setLastUpdateTime(Date.now());\n        console.log('Обновлены данные Bitcoin:', candles.length, `свечей (${timeframe} интервал)`);\n      } catch (error) {\n        console.error('Ошибка загрузки данных Bitcoin:', error);\n        // Fallback to previous static data if API fails\n        const fallbackData = [];\n        const basePrice = 96000;\n        for (let i = 0; i < 24; i++) {\n          const price = basePrice + (Math.random() - 0.5) * 2000;\n          fallbackData.push({\n            timestamp: Date.now() - (24 - i) * 60 * 60 * 1000,\n            open: price,\n            high: price + Math.random() * 500,\n            low: price - Math.random() * 500,\n            close: price + (Math.random() - 0.5) * 200,\n            volume: Math.random() * 1000\n          });\n        }\n        setBitcoinCandles(fallbackData);\n      }\n    };\n    \n    fetchBitcoinData();\n    \n    // Update every 1 second for real-time feel\n    const interval = setInterval(fetchBitcoinData, 1 * 1000);\n    return () => clearInterval(interval);\n  }, [timeframe]);\n\n  // Draw real Bitcoin candlestick chart background  \n  const drawBitcoinChart = useCallback((ctx: CanvasRenderingContext2D, width: number, height: number, opacity?: number) => {\n    if (bitcoinCandles.length === 0) return;\n    \n    // Find min/max prices from all candles\n    const allPrices = bitcoinCandles.flatMap(candle => [candle.high, candle.low]);\n    const minPrice = Math.min(...allPrices);\n    const maxPrice = Math.max(...allPrices);\n    const priceRange = maxPrice - minPrice;\n    \n    if (priceRange === 0) return; // No price movement\n    \n    ctx.save();\n    \n    // Reserve space for price scale on the right\n    const scaleWidth = 80;\n    const chartWidth = width - scaleWidth;\n    \n    // Draw candlesticks in monochrome style - configurable opacity\n    const actualOpacity = opacity !== undefined ? opacity : chartOpacity;\n    ctx.globalAlpha = actualOpacity / 100;\n    \n    const candleWidth = Math.max(6, chartWidth / bitcoinCandles.length * 0.7);\n    const candleSpacing = chartWidth / bitcoinCandles.length;\n    \n    bitcoinCandles.forEach((candle, index) => {\n      const x = (index + 0.5) * candleSpacing;\n      \n      // Scale prices to canvas with proper margins\n      const margin = height * 0.1;\n      const chartHeight = height - 2 * margin;\n      \n      const openY = margin + ((maxPrice - candle.open) / priceRange) * chartHeight;\n      const closeY = margin + ((maxPrice - candle.close) / priceRange) * chartHeight;\n      const highY = margin + ((maxPrice - candle.high) / priceRange) * chartHeight;\n      const lowY = margin + ((maxPrice - candle.low) / priceRange) * chartHeight;\n      \n      // Monochrome style - subtle black and white background\n      const isGreen = candle.close >= candle.open;\n      \n      if (isGreen) {\n        // Light gray for up candles - filled with background color\n        ctx.strokeStyle = '#888888';\n        ctx.fillStyle = '#0a0a0a'; // Цвет фона графика\n      } else {\n        // Dark gray for down candles - filled\n        ctx.fillStyle = '#333333';\n        ctx.strokeStyle = '#333333';\n      }\n      \n      // Draw high-low shadow lines (wicks) first\n      ctx.lineWidth = 0.5;\n      ctx.beginPath();\n      ctx.moveTo(x, highY);\n      ctx.lineTo(x, lowY);\n      ctx.stroke();\n      \n      // Draw candle body\n      const bodyTop = Math.min(openY, closeY);\n      const bodyHeight = Math.max(2, Math.abs(closeY - openY));\n      \n      // Reset stroke and fill colors for body\n      if (isGreen) {\n        ctx.strokeStyle = '#888888';\n        ctx.fillStyle = '#0a0a0a'; // Цвет фона графика\n      } else {\n        ctx.fillStyle = '#333333';\n        ctx.strokeStyle = '#333333';\n      }\n      \n      if (bodyHeight < 3) {\n        // Doji - thin horizontal line\n        ctx.lineWidth = 0.5;\n        ctx.beginPath();\n        ctx.moveTo(x - candleWidth/2, openY);\n        ctx.lineTo(x + candleWidth/2, openY);\n        ctx.stroke();\n      } else {\n        if (isGreen) {\n          // Up candles - filled with background color and stroked outline\n          ctx.fillRect(x - candleWidth/2, bodyTop, candleWidth, bodyHeight);\n          ctx.lineWidth = 0.5;\n          ctx.strokeRect(x - candleWidth/2, bodyTop, candleWidth, bodyHeight);\n        } else {\n          // Down candles - filled dark\n          ctx.fillRect(x - candleWidth/2, bodyTop, candleWidth, bodyHeight);\n        }\n      }\n    });\n    \n    // Draw price scale to the right of chart\n    const margin = height * 0.1;\n    const chartHeight = height - 2 * margin;\n    \n    // Price scale background\n    ctx.globalAlpha = 0.05;\n    ctx.fillStyle = '#333333';\n    ctx.fillRect(chartWidth, 0, scaleWidth, height);\n    \n    // Vertical separator line\n    ctx.globalAlpha = 0.3;\n    ctx.strokeStyle = '#444444';\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.moveTo(chartWidth, 0);\n    ctx.lineTo(chartWidth, height);\n    ctx.stroke();\n    \n    // Price scale labels\n    ctx.globalAlpha = 0.7;\n    ctx.fillStyle = '#888888';\n    ctx.font = '10px JetBrains Mono, monospace';\n    ctx.textAlign = 'right';\n    \n    // Calculate price levels (8 levels)\n    const priceStep = priceRange / 7;\n    for (let i = 0; i <= 7; i++) {\n      const price = minPrice + (i * priceStep);\n      const y = margin + chartHeight - (i * chartHeight / 7);\n      \n      // Price label\n      ctx.fillText(`${Math.round(price).toLocaleString()}`, chartWidth + scaleWidth - 5, y + 4);\n      \n      // Small tick mark\n      ctx.globalAlpha = 0.4;\n      ctx.strokeStyle = '#666666';\n      ctx.lineWidth = 0.5;\n      ctx.beginPath();\n      ctx.moveTo(chartWidth + 2, y);\n      ctx.lineTo(chartWidth + 8, y);\n      ctx.stroke();\n      ctx.globalAlpha = 0.7;\n    }\n    \n    // Current price indicator\n    const lastCandle = bitcoinCandles[bitcoinCandles.length - 1];\n    if (lastCandle) {\n      const currentPrice = lastCandle.close;\n      const currentPriceY = margin + ((maxPrice - currentPrice) / priceRange) * chartHeight;\n      \n      // Current price line across scale\n      ctx.globalAlpha = 0.8;\n      ctx.strokeStyle = '#ff6666';\n      ctx.lineWidth = 1.5;\n      ctx.beginPath();\n      ctx.moveTo(chartWidth, currentPriceY);\n      ctx.lineTo(chartWidth + scaleWidth, currentPriceY);\n      ctx.stroke();\n      \n      // Current price label without red background - just the text\n      ctx.globalAlpha = 0.9;\n      ctx.fillStyle = '#ffffff';\n      ctx.font = 'bold 10px JetBrains Mono, monospace';\n      ctx.textAlign = 'center';\n      ctx.fillText(`${Math.round(currentPrice).toLocaleString()}`, chartWidth + scaleWidth/2, currentPriceY + 3);\n      \n      // Add live indicator (pulsing dot)\n      const timeSinceUpdate = Date.now() - lastUpdateTime;\n      const isRecent = timeSinceUpdate < 20000; // 20 seconds\n      if (isRecent) {\n        const alpha = 0.6 + 0.4 * Math.sin(Date.now() * 0.005); // Pulsing effect\n        ctx.globalAlpha = alpha;\n        ctx.fillStyle = '#00ff88';\n        ctx.beginPath();\n        ctx.arc(chartWidth - 8, currentPriceY, 4, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n    \n    // No header text - clean chart appearance\n    \n    ctx.restore();\n  }, [bitcoinCandles]);\n\n  // Animation loop\n  const animate = useCallback((currentTime: number) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n    if (!canvas || !ctx) return;\n\n    const state = animationStateRef.current;\n    const deltaTime = currentTime - state.lastTime;\n    state.lastTime = currentTime;\n    state.isPaused = isPaused;\n\n    if (!isPaused) {\n      // Clear canvas completely to remove traces\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      // Draw Bitcoin chart background (dimmed)\n      drawBitcoinChart(ctx, canvas.width, canvas.height, chartOpacityRef.current);\n\n\n\n      // Update and draw liquidations\n      state.liquidations = state.liquidations.filter(block => {\n        const alive = updateLiquidationBlock(block, deltaTime);\n        if (alive) {\n          drawLiquidationBlock(ctx, block);\n        }\n        return alive;\n      });\n\n      // Update and draw particles\n      state.particles = state.particles.filter(particle => {\n        const alive = updateParticle(particle, deltaTime);\n        if (alive) {\n          drawParticle(ctx, particle);\n        }\n        return alive;\n      });\n\n      // Update and draw left cannon only\n      updateCannons(canvas.width, canvas.height, deltaTime);\n      drawCannon(ctx, state.leftCannon);\n      \n      // Cannon range calculation (invisible)\n      const cannonRange = canvas.height * 0.70;\n      const bottomLimit = canvas.height * 0.95;\n\n      // Update and draw cannonballs\n      updateCannonballs(deltaTime);\n      state.cannonballs.forEach(ball => {\n        drawCannonball(ctx, ball);\n      });\n\n      // Draw stylish mute button in bottom right corner\n      const buttonSize = 40;\n      const buttonX = canvas.width - buttonSize - 15;\n      const buttonY = canvas.height - buttonSize - 15;\n      \n      // Button background with gradient\n      const gradient = ctx.createRadialGradient(buttonX + buttonSize/2, buttonY + buttonSize/2, 0, buttonX + buttonSize/2, buttonY + buttonSize/2, buttonSize/2);\n      if (isSoundMuted) {\n        gradient.addColorStop(0, '#ff6b6b');\n        gradient.addColorStop(1, '#ee5a52');\n      } else {\n        gradient.addColorStop(0, '#51cf66');\n        gradient.addColorStop(1, '#40c057');\n      }\n      \n      ctx.fillStyle = gradient;\n      ctx.globalAlpha = 0.9;\n      ctx.beginPath();\n      ctx.roundRect(buttonX, buttonY, buttonSize, buttonSize, 8);\n      ctx.fill();\n      \n      // Border with cyber theme\n      ctx.strokeStyle = isSoundMuted ? '#ff9999' : '#69db7c';\n      ctx.lineWidth = 2;\n      ctx.globalAlpha = 1;\n      ctx.beginPath();\n      ctx.roundRect(buttonX, buttonY, buttonSize, buttonSize, 8);\n      ctx.stroke();\n      \n      // Speaker icon\n      ctx.fillStyle = '#ffffff';\n      ctx.font = 'bold 16px monospace';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(isSoundMuted ? '🔇' : '🔊', buttonX + buttonSize/2, buttonY + buttonSize/2);\n\n    }\n\n    requestAnimationFrame(animate);\n  }, [isPaused, updateLiquidationBlock, updateParticle, drawLiquidationBlock, drawParticle, drawBitcoinChart, updateCannons, drawCannon, drawCannonball, updateCannonballs]);\n\n  // Add new liquidations to animation (without duplicates)\n  useEffect(() => {\n    const state = animationStateRef.current;\n    const currentTime = Date.now();\n    \n    liquidations.forEach(liquidation => {\n      // Skip liquidations that happened before component loaded (prevents duplicates on reload)\n      if (liquidation.timestamp < componentStartTime.current) {\n        return;\n      }\n      \n      // Skip old liquidations - only show very fresh ones to prevent duplicates on reload\n      const liquidationAge = currentTime - liquidation.timestamp;\n      const maxAge = 3000; // 3 seconds max age for liquidations\n      \n      if (liquidationAge > maxAge) {\n        // Skip old liquidations\n        return;\n      }\n      \n      // Create unique identifier including timestamp and value to prevent duplicates\n      const uniqueKey = `${liquidation.id}_${liquidation.timestamp}_${liquidation.value}`;\n      \n      // Check if already processed\n      if (!processedLiquidations.current.has(uniqueKey)) {\n        // Check if already exists in current animation\n        const exists = state.liquidations.some(block => block.id === liquidation.id);\n        if (!exists) {\n          try {\n            const block = createLiquidationBlock(liquidation);\n            state.liquidations.push(block);\n            processedLiquidations.current.add(uniqueKey);\n            \n            // Trigger flash text when liquidation appears\n            setShowFlashText(true);\n            setTimeout(() => setShowFlashText(false), 2000); // Show for 2 seconds\n            \n            // Keep processed set manageable (remove old entries)\n            if (processedLiquidations.current.size > 1000) {\n              const entries = Array.from(processedLiquidations.current);\n              processedLiquidations.current = new Set(entries.slice(-500));\n            }\n          } catch (error) {\n            console.warn('Could not create liquidation block:', error);\n          }\n        }\n      }\n    });\n  }, [liquidations, createLiquidationBlock]);\n\n  // Start animation\n  useEffect(() => {\n    const animationId = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(animationId);\n  }, [animate]);\n\n  return (\n    <div className=\"relative w-full h-full\">\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0 w-full h-full\"\n        width={canvasSize.width}\n        height={canvasSize.height}\n        tabIndex={0}\n        style={{ outline: 'none' }}\n      />\n      \n      {/* Timeframe Selector */}\n      <div className=\"absolute top-16 right-4 z-10\">\n        <div className=\"flex items-center gap-1 bg-black/30 backdrop-blur-sm rounded-lg p-2\">\n          <span className=\"text-xs text-gray-400 font-mono mr-2\">График:</span>\n          {timeframeOptions.map((tf) => (\n            <button\n              key={tf.value}\n              onClick={() => setTimeframe(tf.value)}\n              className={`\n                px-2 py-1 text-xs font-mono rounded transition-all duration-200\n                ${timeframe === tf.value \n                  ? 'bg-accent-blue text-black font-bold' \n                  : 'text-gray-300 hover:text-white hover:bg-white/10'\n                }\n              `}\n            >\n              {tf.label}\n            </button>\n          ))}\n        </div>\n        \n\n      </div>\n      \n      {/* Flashing text \"Click to explode bags\" in center */}\n      {showFlashText && (\n        <div \n          className={`\n            absolute bottom-20 left-1/2 transform -translate-x-1/2 z-10\n            transition-opacity duration-150\n            ${isFlashing ? 'opacity-100' : 'opacity-30'}\n          `}\n        >\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-lg px-4 py-2 border border-yellow-400/30\">\n            <span className=\"text-lg font-mono text-yellow-400 whitespace-nowrap\">\n              Click to explode bags\n            </span>\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n}\n","size_bytes":52142},"client/src/components/LiveStatsPanel.tsx":{"content":"import React from 'react';\nimport { Liquidation } from '@shared/schema';\n\ninterface LiveStatsPanelProps {\n  recentLiquidations: Liquidation[];\n}\n\nexport function LiveStatsPanel({ recentLiquidations }: LiveStatsPanelProps) {\n  const formatCurrency = (amount: number) => {\n    if (amount >= 1000000) {\n      return `$${(amount / 1000000).toFixed(1)}M`;\n    }\n    if (amount >= 1000) {\n      return `$${(amount / 1000).toFixed(1)}K`;\n    }\n    return `$${amount.toFixed(0)}`;\n  };\n\n  const displayLiquidations = recentLiquidations.slice(-5).reverse();\n\n  return (\n    <div className=\"bg-cyber-gray/90 backdrop-blur-md rounded-lg border border-cyber-border p-4 w-64\">\n      <h3 className=\"text-lg font-semibold mb-3 text-accent-blue\">Recent Liquidations</h3>\n      <div className=\"space-y-2 text-sm font-mono\">\n        {displayLiquidations.length > 0 ? (\n          displayLiquidations.map((liquidation) => (\n            <div \n              key={liquidation.id} \n              className=\"flex justify-between items-center py-1 border-b border-cyber-border/50\"\n            >\n              <span className=\"text-accent-yellow font-semibold\">\n                {liquidation.symbol.replace('USDT', '').replace('USD', '')}\n              </span>\n              <span className={liquidation.side === 'long' ? 'text-long-red' : 'text-short-green'}>\n                {liquidation.side === 'long' ? '-' : '+'}\n                {formatCurrency(liquidation.value)}\n              </span>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-center text-gray-500 py-4\">\n            Waiting for liquidation data...\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1673},"client/src/components/MarketSentiment.tsx":{"content":"import React from 'react';\nimport { MarketStats } from '@shared/schema';\n\ninterface MarketSentimentProps {\n  stats: MarketStats;\n}\n\nexport function MarketSentiment({ stats }: MarketSentimentProps) {\n  const total = stats.longShortRatio.longs + stats.longShortRatio.shorts;\n  const longPercentage = total > 0 ? (stats.longShortRatio.longs / total) * 100 : 50;\n  const shortPercentage = 100 - longPercentage;\n\n  const maxVolume = Math.max(...stats.volumeHistory.map(h => Math.max(h.longs, h.shorts)), 1);\n\n  return (\n    <div className=\"bg-cyber-gray/90 backdrop-blur-md rounded-lg border border-cyber-border p-4 w-64\">\n      <h3 className=\"text-lg font-semibold mb-3 text-accent-blue\">Market Sentiment</h3>\n      <div className=\"space-y-4\">\n        {/* Long/Short Ratio */}\n        <div>\n          <div className=\"flex justify-between text-sm mb-2\">\n            <span className=\"text-long-red\">Longs</span>\n            <span className=\"text-short-green\">Shorts</span>\n          </div>\n          <div className=\"w-full bg-cyber-border rounded-full h-3 overflow-hidden\">\n            <div \n              className=\"h-full bg-gradient-to-r from-long-red to-short-green\" \n              style={{\n                background: `linear-gradient(90deg, #ef4444 0%, #ef4444 ${longPercentage}%, #10b981 ${longPercentage}%, #10b981 100%)`\n              }}\n            />\n          </div>\n          <div className=\"flex justify-between text-xs mt-1 text-gray-400\">\n            <span>{longPercentage.toFixed(0)}%</span>\n            <span>{shortPercentage.toFixed(0)}%</span>\n          </div>\n        </div>\n        \n        {/* Liquidation Volume Chart */}\n        <div>\n          <div className=\"text-sm text-gray-400 mb-2\">24h Volume Trend</div>\n          <div className=\"flex items-end space-x-1 h-16\">\n            {stats.volumeHistory.length > 0 ? (\n              stats.volumeHistory.slice(-10).map((item, index) => {\n                const longHeight = maxVolume > 0 ? (item.longs / maxVolume) * 60 : 0;\n                const shortHeight = maxVolume > 0 ? (item.shorts / maxVolume) * 60 : 0;\n                const totalHeight = Math.max(longHeight + shortHeight, 2);\n                \n                return (\n                  <div key={index} className=\"flex flex-col justify-end h-16\">\n                    {shortHeight > 0 && (\n                      <div \n                        className=\"bg-short-green w-2 rounded-t opacity-80\" \n                        style={{ height: `${shortHeight}px` }}\n                      />\n                    )}\n                    {longHeight > 0 && (\n                      <div \n                        className=\"bg-long-red w-2 opacity-80\" \n                        style={{ height: `${longHeight}px` }}\n                      />\n                    )}\n                  </div>\n                );\n              })\n            ) : (\n              // Placeholder bars when no data\n              Array.from({ length: 10 }, (_, index) => (\n                <div key={index} className=\"bg-cyber-border w-2 h-2 rounded opacity-40\" />\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3145},"client/src/components/StatsHeader.tsx":{"content":"import React from 'react';\nimport { MarketStats } from '@shared/schema';\n\ninterface StatsHeaderProps {\n  stats: MarketStats;\n  isConnected: boolean;\n}\n\nexport function StatsHeader({ stats, isConnected }: StatsHeaderProps) {\n  const formatCurrency = (amount: number) => {\n    if (amount >= 1000000) {\n      return `$${(amount / 1000000).toFixed(1)}M`;\n    }\n    if (amount >= 1000) {\n      return `$${(amount / 1000).toFixed(1)}K`;\n    }\n    return `$${amount.toFixed(2)}`;\n  };\n\n  return (\n    <div className=\"fixed top-0 left-0 right-0 z-50 bg-cyber-gray/90 backdrop-blur-md border-b border-cyber-border\">\n      <div className=\"container mx-auto px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-8\">\n            <h1 className=\"text-2xl font-bold bg-gradient-to-r from-accent-blue to-accent-yellow bg-clip-text text-transparent\">\n              CryptoLiquidations\n            </h1>\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"text-center\">\n                <div className=\"text-sm text-gray-400\">Total Longs</div>\n                <div className=\"text-xl font-mono font-bold text-long-red stats-glow\">\n                  {formatCurrency(stats.totalLongs)}\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-sm text-gray-400\">Total Shorts</div>\n                <div className=\"text-xl font-mono font-bold text-short-green stats-glow\">\n                  {formatCurrency(stats.totalShorts)}\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-sm text-gray-400\">Active Feed</div>\n                <div className=\"text-xl font-mono font-bold text-accent-blue stats-glow\">\n                  {stats.activeLiquidations}\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Connection Status */}\n            <div className=\"flex items-center space-x-2\">\n              <div \n                className={`w-3 h-3 rounded-full animate-pulse ${\n                  isConnected ? 'bg-short-green' : 'bg-long-red'\n                }`}\n              />\n              <span className=\"text-sm text-gray-400\">\n                {isConnected ? 'Live Feed' : 'Disconnected'}\n              </span>\n            </div>\n            \n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2537},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useLiquidationData.tsx":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { Liquidation, MarketStats } from '@shared/schema';\n\ninterface UseLiquidationDataReturn {\n  liquidations: Liquidation[];\n  marketStats: MarketStats;\n  isConnected: boolean;\n  connectionError: string | null;\n  reconnect: () => void;\n}\n\nexport function useLiquidationData(): UseLiquidationDataReturn {\n  const [liquidations, setLiquidations] = useState<Liquidation[]>([]);\n  const [marketStats, setMarketStats] = useState<MarketStats>({\n    totalLongs: 0,\n    totalShorts: 0,\n    activeLiquidations: 0,\n    longShortRatio: { longs: 0, shorts: 0 },\n    volumeHistory: [],\n  });\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionError, setConnectionError] = useState<string | null>(null);\n  const [ws, setWs] = useState<WebSocket | null>(null);\n\n  const connect = useCallback(() => {\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      const socket = new WebSocket(wsUrl);\n\n      socket.onopen = () => {\n        console.log('Connected to liquidation feed');\n        setIsConnected(true);\n        setConnectionError(null);\n      };\n\n      socket.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          \n          switch (message.type) {\n            case 'liquidation':\n              setLiquidations(prev => {\n                const updated = [...prev, message.data];\n                // Keep only last 100 liquidations\n                return updated.slice(-100);\n              });\n              break;\n              \n            case 'marketStats':\n              setMarketStats(message.data);\n              break;\n              \n            case 'recentLiquidations':\n              setLiquidations(message.data || []);\n              break;\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      socket.onclose = () => {\n        console.log('Disconnected from liquidation feed');\n        setIsConnected(false);\n        // Attempt to reconnect after 3 seconds\n        setTimeout(connect, 3000);\n      };\n\n      socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setConnectionError('Connection error occurred');\n        setIsConnected(false);\n      };\n\n      setWs(socket);\n    } catch (error) {\n      console.error('Failed to connect to WebSocket:', error);\n      setConnectionError('Failed to establish connection');\n      setTimeout(connect, 5000);\n    }\n  }, []);\n\n  useEffect(() => {\n    connect();\n    \n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, [connect]);\n\n  const reconnect = useCallback(() => {\n    if (ws) {\n      ws.close();\n    }\n    setConnectionError(null);\n    connect();\n  }, [ws, connect]);\n\n  return {\n    liquidations,\n    marketStats,\n    isConnected,\n    connectionError,\n    reconnect,\n  };\n}\n","size_bytes":2992},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/LiquidationDashboard.tsx":{"content":"import React, { useState } from 'react';\nimport { LiquidationCanvas } from '../components/LiquidationCanvas';\nimport { StatsHeader } from '../components/StatsHeader';\nimport { LiveStatsPanel } from '../components/LiveStatsPanel';\nimport { MarketSentiment } from '../components/MarketSentiment';\nimport { useLiquidationData } from '../hooks/useLiquidationData';\nimport { Pause, Play, Settings, RefreshCw } from 'lucide-react';\n\nexport default function LiquidationDashboard() {\n  const [isPaused, setIsPaused] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [minLiquidationAmount, setMinLiquidationAmount] = useState(1000); // Default $1K minimum\n\n  const [chartOpacity, setChartOpacity] = useState(100); // Opacity in percentage\n  \n  const { \n    liquidations, \n    marketStats, \n    isConnected, \n    connectionError,\n    reconnect \n  } = useLiquidationData();\n\n  // Filter liquidations based on minimum amount\n  const filteredLiquidations = liquidations.filter(liq => liq.value >= minLiquidationAmount);\n\n  const handleTogglePause = () => {\n    setIsPaused(!isPaused);\n  };\n\n  const handleToggleSettings = () => {\n    setShowSettings(!showSettings);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-cyber-dark text-white font-sans overflow-hidden\">\n\n      \n      {/* Stats Header */}\n      <StatsHeader \n        stats={marketStats}\n        isConnected={isConnected}\n      />\n      \n      {/* Main Layout with Sidebar */}\n      <div className=\"flex h-screen pt-20\">\n        {/* Main Canvas Area */}\n        <div className=\"flex-1 relative\">\n          <LiquidationCanvas \n            liquidations={filteredLiquidations}\n            isPaused={isPaused}\n            chartOpacity={chartOpacity}\n          />\n        </div>\n        \n        {/* Right Sidebar */}\n        <div className=\"w-80 bg-cyber-gray/95 backdrop-blur-md border-l border-cyber-border p-4 space-y-4 overflow-y-auto\">\n          {/* Market Sentiment */}\n          <MarketSentiment stats={marketStats} />\n          \n          {/* Recent Liquidations */}\n          <LiveStatsPanel recentLiquidations={filteredLiquidations} />\n          \n          {/* Liquidation Filter Panel */}\n          <div className=\"bg-cyber-dark/50 rounded-lg border border-cyber-border p-4\">\n            <h3 className=\"text-lg font-semibold mb-3 text-accent-yellow\">Liquidation Filter</h3>\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"block text-sm text-gray-400 mb-2\">\n                  Minimum Amount: ${minLiquidationAmount >= 1000000 \n                    ? (minLiquidationAmount / 1000000).toFixed(1) + 'M' \n                    : minLiquidationAmount >= 1000 \n                    ? (minLiquidationAmount / 1000).toFixed(0) + 'K'\n                    : minLiquidationAmount.toFixed(0)\n                  }\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"1000\"\n                  max=\"10000000\"\n                  step=\"1000\"\n                  value={minLiquidationAmount}\n                  onChange={(e) => setMinLiquidationAmount(parseInt(e.target.value))}\n                  className=\"w-full h-2 bg-cyber-border rounded-lg appearance-none cursor-pointer slider\"\n                />\n                <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                  <span>$1K</span>\n                  <span>$10M</span>\n                </div>\n              </div>\n              \n              <div className=\"text-xs text-gray-400\">\n                Showing: {filteredLiquidations.length} of {liquidations.length} liquidations\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                <button \n                  onClick={() => setMinLiquidationAmount(10000)}\n                  className={`px-2 py-1 rounded text-center transition-colors ${\n                    minLiquidationAmount === 10000 \n                      ? 'bg-accent-blue text-white' \n                      : 'bg-cyber-border text-gray-400 hover:bg-gray-700'\n                  }`}\n                >\n                  $10K\n                </button>\n                <button \n                  onClick={() => setMinLiquidationAmount(50000)}\n                  className={`px-2 py-1 rounded text-center transition-colors ${\n                    minLiquidationAmount === 50000 \n                      ? 'bg-accent-blue text-white' \n                      : 'bg-cyber-border text-gray-400 hover:bg-gray-700'\n                  }`}\n                >\n                  $50K\n                </button>\n                <button \n                  onClick={() => setMinLiquidationAmount(100000)}\n                  className={`px-2 py-1 rounded text-center transition-colors ${\n                    minLiquidationAmount === 100000 \n                      ? 'bg-accent-blue text-white' \n                      : 'bg-cyber-border text-gray-400 hover:bg-gray-700'\n                  }`}\n                >\n                  $100K\n                </button>\n                <button \n                  onClick={() => setMinLiquidationAmount(1000000)}\n                  className={`px-2 py-1 rounded text-center transition-colors ${\n                    minLiquidationAmount === 1000000 \n                      ? 'bg-accent-blue text-white' \n                      : 'bg-cyber-border text-gray-400 hover:bg-gray-700'\n                  }`}\n                >\n                  $1M\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n        \n      {/* Connection Error Banner */}\n      {connectionError && (\n        <div className=\"absolute top-24 left-1/2 transform -translate-x-1/2 bg-long-red/90 backdrop-blur-md text-white px-4 py-2 rounded-lg border border-red-400 flex items-center space-x-2\">\n          <span className=\"text-sm\">{connectionError}</span>\n          <button \n            onClick={reconnect}\n            className=\"text-white hover:text-gray-200 transition-colors\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </button>\n        </div>\n      )}\n      \n      {/* Floating Action Controls */}\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <div className=\"flex flex-col space-y-3\">\n          <button \n            onClick={handleTogglePause}\n            className=\"bg-accent-blue hover:bg-blue-600 text-white p-3 rounded-full shadow-lg transition-all duration-200 hover:scale-110\"\n            title={isPaused ? 'Resume' : 'Pause'}\n          >\n            {isPaused ? <Play className=\"w-6 h-6\" /> : <Pause className=\"w-6 h-6\" />}\n          </button>\n          \n          <button \n            onClick={handleToggleSettings}\n            className=\"bg-cyber-gray hover:bg-gray-700 text-white p-3 rounded-full shadow-lg transition-all duration-200 hover:scale-110\"\n            title=\"Settings\"\n          >\n            <Settings className=\"w-6 h-6\" />\n          </button>\n        </div>\n      </div>\n      \n      {/* Settings Panel */}\n      {showSettings && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-60 flex items-center justify-center\">\n          <div className=\"bg-cyber-gray border border-cyber-border rounded-lg p-6 max-w-md w-full mx-4\">\n            <h3 className=\"text-xl font-semibold mb-4 text-accent-blue\">Settings</h3>\n            \n            <div className=\"space-y-4\">\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-400 mb-2\">\n                  Minimum Liquidation: ${minLiquidationAmount >= 1000000 \n                    ? (minLiquidationAmount / 1000000).toFixed(1) + 'M' \n                    : minLiquidationAmount >= 1000 \n                    ? (minLiquidationAmount / 1000).toFixed(0) + 'K'\n                    : minLiquidationAmount.toFixed(0)\n                  }\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"1000\"\n                  max=\"10000000\"\n                  step=\"1000\"\n                  value={minLiquidationAmount}\n                  onChange={(e) => setMinLiquidationAmount(parseInt(e.target.value))}\n                  className=\"w-full h-2 bg-cyber-border rounded-lg appearance-none cursor-pointer slider\"\n                />\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"pauseAnimation\"\n                  checked={isPaused}\n                  onChange={(e) => setIsPaused(e.target.checked)}\n                  className=\"w-4 h-4 text-accent-blue bg-cyber-border border-gray-600 rounded focus:ring-accent-blue\"\n                />\n                <label htmlFor=\"pauseAnimation\" className=\"text-sm text-gray-400\">\n                  Pause Animation\n                </label>\n              </div>\n\n\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-400 mb-2\">\n                  Прозрачность графика: {chartOpacity}%\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"100\"\n                  step=\"1\"\n                  value={chartOpacity}\n                  onChange={(e) => setChartOpacity(parseInt(e.target.value))}\n                  className=\"w-full h-2 bg-cyber-border rounded-lg appearance-none cursor-pointer slider\"\n                />\n              </div>\n              \n              <div className=\"pt-4 border-t border-cyber-border\">\n                <div className=\"text-sm text-gray-400\">\n                  <p><strong>Connection Status:</strong> {isConnected ? 'Connected' : 'Disconnected'}</p>\n                  <p><strong>Active Liquidations:</strong> {filteredLiquidations.length} / {liquidations.length}</p>\n                  <p><strong>Total Volume:</strong> ${((marketStats.totalLongs + marketStats.totalShorts) / 1000000).toFixed(1)}M</p>\n                  <p><strong>Filter:</strong> Above ${minLiquidationAmount >= 1000000 \n                    ? (minLiquidationAmount / 1000000).toFixed(1) + 'M' \n                    : minLiquidationAmount >= 1000 \n                    ? (minLiquidationAmount / 1000).toFixed(0) + 'K'\n                    : minLiquidationAmount.toFixed(0)\n                  }</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end mt-6\">\n              <button\n                onClick={() => setShowSettings(false)}\n                className=\"px-4 py-2 bg-accent-blue hover:bg-blue-600 text-white rounded-lg transition-colors\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10771},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/liquidation.ts":{"content":"export interface LiquidationBlock {\n  id: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  velocity: number;\n  rotation: number;\n  rotationSpeed: number;\n  coin: string;\n  isLong: boolean;\n  amount: number;\n  price: number;\n  opacity: number;\n  isExploding: boolean;\n  explosionTime: number;\n  explosionType?: number;\n  isCaught: boolean;\n}\n\nexport interface Particle {\n  id: string;\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  life: number;\n  decay: number;\n  color: string;\n  size: number;\n}\n\nexport interface Cannon {\n  x: number;\n  y: number;\n  angle: number;\n  isFiring: boolean;\n  fireProgress: number;\n  targetBag: string | null;\n  side: 'left' | 'right';\n  movingRight?: boolean;\n  speed?: number;\n  minX?: number;\n  maxX?: number;\n  wheelRotation?: number;\n}\n\nexport interface Cannonball {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  targetBagId: string;\n  life: number;\n}\n\nexport interface AnimationState {\n  liquidations: LiquidationBlock[];\n  particles: Particle[];\n  animationSpeed: number;\n  isPaused: boolean;\n  lastTime: number;\n}\n","size_bytes":1093},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}