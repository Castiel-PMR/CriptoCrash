import { useState, useEffect, useCallback } from 'react';
import { Liquidation, MarketStats } from '@shared/schema';

interface UseLiquidationDataReturn {
  liquidations: Liquidation[];
  lastFiveLiquidations: Liquidation[]; // üî• –ù–û–í–û–ï: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π (–Ω–µ —Å—Ç–∏—Ä–∞—é—Ç—Å—è)
  marketStats: MarketStats;
  isConnected: boolean;
  connectionError: string | null;
  reconnect: () => void;
}

export function useLiquidationData(): UseLiquidationDataReturn {
  const [liquidations, setLiquidations] = useState<Liquidation[]>([]);
  // üî• –ù–û–í–û–ï: –û—Ç–¥–µ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π (–Ω–µ —Å—Ç–∏—Ä–∞—é—Ç—Å—è)
  const [lastFiveLiquidations, setLastFiveLiquidations] = useState<Liquidation[]>([]);
  const [marketStats, setMarketStats] = useState<MarketStats>({
    totalLongs: 0,
    totalShorts: 0,
    activeLiquidations: 0,
    longShortRatio: { longs: 0, shorts: 0 },
    volumeHistory: [],
  });
  const [isConnected, setIsConnected] = useState(false);
  const [connectionError, setConnectionError] = useState<string | null>(null);
  const [ws, setWs] = useState<WebSocket | null>(null);

  const connect = useCallback(() => {
    try {
      const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
      const wsUrl = `${protocol}//${window.location.host}/ws`;
      const socket = new WebSocket(wsUrl);

      socket.onopen = () => {
        console.log('Connected to liquidation feed');
        setIsConnected(true);
        setConnectionError(null);
      };

      socket.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          
          switch (message.type) {
            case 'liquidation':
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
              const liquidation = message.data;
              if (liquidation && liquidation.symbol && liquidation.value > 0) {
                setLiquidations(prev => {
                  const updated = [...prev, liquidation];
                  // üî• –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ 30 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö (–±—ã–ª–æ 100)
                  return updated.slice(-30);
                });
                
                // üî• –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ $50K+)
                if (liquidation.value >= 50000) {
                  setLastFiveLiquidations(prev => {
                    const updated = [...prev, liquidation];
                    return updated.slice(-5); // –í—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫—Ä—É–ø–Ω—ã—Ö
                  });
                }
              }
              break;
              
            case 'marketStats':
              setMarketStats(message.data);
              break;
              
            case 'recentLiquidations':
              const recentLiqs = message.data || [];
              setLiquidations(recentLiqs);
              // üî• –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 (—Ç–æ–ª—å–∫–æ $50K+)
              if (recentLiqs.length > 0) {
                const filtered50k = recentLiqs.filter((liq: Liquidation) => liq.value >= 50000);
                setLastFiveLiquidations(filtered50k.slice(-5));
              }
              break;
          }
        } catch (error) {
          console.error('Error parsing WebSocket message:', error);
        }
      };

      socket.onclose = () => {
        console.log('Disconnected from liquidation feed');
        setIsConnected(false);
        // Attempt to reconnect after 3 seconds
        setTimeout(connect, 3000);
      };

      socket.onerror = (error) => {
        console.error('WebSocket error:', error);
        setConnectionError('Connection error occurred');
        setIsConnected(false);
      };

      setWs(socket);
    } catch (error) {
      console.error('Failed to connect to WebSocket:', error);
      setConnectionError('Failed to establish connection');
      setTimeout(connect, 5000);
    }
  }, []);

  useEffect(() => {
    connect();
    
    return () => {
      if (ws) {
        ws.close();
      }
    };
  }, [connect]);

  const reconnect = useCallback(() => {
    if (ws) {
      ws.close();
    }
    setConnectionError(null);
    connect();
  }, [ws, connect]);

  return {
    liquidations,
    lastFiveLiquidations, // üî• –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
    marketStats,
    isConnected,
    connectionError,
    reconnect,
  };
}
