/**
 * üéÆ FPS Limiter
 * –¶–µ–ª—å: –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
 * –†–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–∞–±–∏–ª—å–Ω—ã–π 60 FPS, –º–µ–Ω—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
 */

export class FPSLimiter {
  private targetFPS: number;
  private frameTime: number;
  private lastFrameTime: number = 0;
  private frameCount: number = 0;
  private fpsUpdateInterval: number = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
  private lastFPSUpdate: number = 0;
  private currentFPS: number = 0;

  constructor(targetFPS: number = 60) {
    this.targetFPS = targetFPS;
    this.frameTime = 1000 / targetFPS;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
   */
  shouldRender(currentTime: number): boolean {
    const deltaTime = currentTime - this.lastFrameTime;
    
    if (deltaTime >= this.frameTime) {
      this.lastFrameTime = currentTime - (deltaTime % this.frameTime);
      this.frameCount++;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º FPS –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
      if (currentTime - this.lastFPSUpdate >= this.fpsUpdateInterval) {
        this.currentFPS = Math.round((this.frameCount * 1000) / (currentTime - this.lastFPSUpdate));
        this.frameCount = 0;
        this.lastFPSUpdate = currentTime;
      }
      
      return true;
    }
    
    return false;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π FPS
   */
  getFPS(): number {
    return this.currentFPS;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å delta time (–¥–ª—è —Ñ–∏–∑–∏–∫–∏)
   */
  getDeltaTime(currentTime: number): number {
    return currentTime - this.lastFrameTime;
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
   */
  reset(): void {
    this.lastFrameTime = 0;
    this.frameCount = 0;
    this.lastFPSUpdate = 0;
    this.currentFPS = 0;
  }

  /**
   * –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π FPS
   */
  setTargetFPS(fps: number): void {
    this.targetFPS = fps;
    this.frameTime = 1000 / fps;
  }
}
