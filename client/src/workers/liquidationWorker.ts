/**
 * üîß Web Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket –¥–∞–Ω–Ω—ã—Ö
 * –¶–µ–ª—å: –†–∞–∑–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
 */

import type { Liquidation, MarketStats } from '@shared/schema';

interface WorkerMessage {
  type: 'init' | 'close' | 'stats';
  data?: any;
}

let ws: WebSocket | null = null;
let reconnectTimer: number | null = null;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
function connectWebSocket(url: string) {
  try {
    ws = new WebSocket(url);

    ws.onopen = () => {
      console.log('üîå Worker: WebSocket connected');
      self.postMessage({ type: 'connected' });
    };

    ws.onmessage = (event) => {
      try {
        const message = JSON.parse(event.data);
        
        // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
        self.postMessage({
          type: message.type,
          data: message.data,
        });
      } catch (error) {
        console.error('Worker: Parse error', error);
      }
    };

    ws.onerror = (error) => {
      console.error('Worker: WebSocket error', error);
      self.postMessage({ type: 'error', data: error });
    };

    ws.onclose = () => {
      console.log('Worker: WebSocket closed, reconnecting...');
      self.postMessage({ type: 'disconnected' });
      
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      if (reconnectTimer) clearTimeout(reconnectTimer);
      reconnectTimer = self.setTimeout(() => {
        connectWebSocket(url);
      }, 3000) as unknown as number;
    };
  } catch (error) {
    console.error('Worker: Connection error', error);
  }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function closeWebSocket() {
  if (reconnectTimer) {
    clearTimeout(reconnectTimer);
    reconnectTimer = null;
  }
  
  if (ws) {
    ws.onopen = null;
    ws.onmessage = null;
    ws.onerror = null;
    ws.onclose = null;
    ws.close();
    ws = null;
  }
  
  console.log('üîå Worker: WebSocket closed');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
self.addEventListener('message', (event: MessageEvent<WorkerMessage>) => {
  const { type, data } = event.data;

  switch (type) {
    case 'init':
      connectWebSocket(data.url);
      break;
      
    case 'close':
      closeWebSocket();
      break;
      
    default:
      console.warn('Worker: Unknown message type', type);
  }
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ Worker
self.addEventListener('error', (event) => {
  console.error('Worker: Error', event);
  closeWebSocket();
});
