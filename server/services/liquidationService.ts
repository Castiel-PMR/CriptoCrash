import { WebSocketServer, WebSocket } from 'ws';
import { Liquidation, MarketStats } from '@shared/schema';

export class LiquidationService {
  private clients: Set<WebSocket> = new Set();
  private binanceWs: WebSocket | null = null;
  private marketStats: MarketStats = {
    totalLongs: 0,
    totalShorts: 0,
    activeLiquidations: 0,
    longShortRatio: { longs: 0, shorts: 0 },
    volumeHistory: [],   // ‚úÖ –æ—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –Ω–µ –ø–∞–¥–∞–ª
    priceMovementDelta: {
      lastPrice: 0,
      priceChange: 0,
      longsPerPriceUnit: 0,
      shortsPerPriceUnit: 0,
      deltaRatio: 1,
    }
  };

  private recentLiquidations: Liquidation[] = [];
  private statsResetInterval: ReturnType<typeof setInterval> | null = null;
  private statsStartTime: number = Date.now();
  
  // üî• –ù–û–í–û–ï: –¢—Ä–µ–∫–∏–Ω–≥ —Ü–µ–Ω—ã –∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ delta
  private priceTracking = {
    btcPrice: 0,
    startPrice: 0,
    startTime: Date.now(),
    longsInPeriod: 0,
    shortsInPeriod: 0,
  };

  constructor(private wss: WebSocketServer) {
    this.setupWebSocketServer();
    this.connectToBinance();
    // üî• –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: Binance –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π REST API –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
    // –¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ WebSocket real-time –¥–∞–Ω–Ω—ã–µ.
    // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PostgreSQL.
    this.startStatsUpdates();
    this.startStatsReset();
  }

  private setupWebSocketServer() {
    this.wss.on('connection', (ws: WebSocket) => {
      console.log('Client connected to liquidation feed');
      this.clients.add(ws);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ä–∞–∑—É
      ws.send(JSON.stringify({
        type: 'marketStats',
        data: this.marketStats
      }));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
      ws.send(JSON.stringify({
        type: 'recentLiquidations',
        data: this.recentLiquidations.slice(-10)
      }));

      ws.on('close', () => {
        this.clients.delete(ws);
        console.log('Client disconnected from liquidation feed');
      });

      ws.on('error', (error) => {
        console.error('WebSocket error:', error);
        this.clients.delete(ws);
      });
    });
  }

  private connectToBinance() {
    const binanceUrl = 'wss://fstream.binance.com/ws/!forceOrder@arr';
    
    try {
      this.binanceWs = new WebSocket(binanceUrl);

      this.binanceWs.on('open', () => {
        console.log('Connected to Binance liquidation stream');
      });

      this.binanceWs.on('message', (data: Buffer) => {
        try {
          const message = JSON.parse(data.toString());
          if (message.o) {
            const liquidation = this.parseBinanceLiquidation(message.o);
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
            if (liquidation) {
              this.processLiquidation(liquidation);
            }
          }
        } catch (error) {
          console.error('Error parsing Binance message:', error);
        }
      });

      this.binanceWs.on('error', (error) => {
        console.error('Binance WebSocket error:', error);
        setTimeout(() => this.connectToBinance(), 5000);
      });

      this.binanceWs.on('close', () => {
        console.log('Binance connection closed, reconnecting...');
        setTimeout(() => this.connectToBinance(), 5000);
      });
    } catch (error) {
      console.error('Failed to connect to Binance:', error);
      setTimeout(() => this.connectToBinance(), 5000);
    }
  }

  // üî• –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  private async fetchInitialLiquidations() {
    try {
      console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π...');
      
      // Binance Futures API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö force orders
      const symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT'];
      let totalLoaded = 0;
      
      for (const symbol of symbols) {
        try {
          const url = `https://fapi.binance.com/fapi/v1/allForceOrders?symbol=${symbol}&limit=20`;
          console.log(`  –ó–∞–≥—Ä—É–∑–∫–∞ ${symbol}...`);
          
          const response = await fetch(url);
          
          if (!response.ok) {
            console.log(`  ‚ö†Ô∏è ${symbol}: HTTP ${response.status}`);
            continue;
          }
          
          const orders = await response.json();
          console.log(`  ‚úì ${symbol}: –ø–æ–ª—É—á–µ–Ω–æ ${orders.length} –æ—Ä–¥–µ—Ä–æ–≤`);
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
          for (const order of orders) {
            const liquidation = this.parseBinanceLiquidation(order);
            if (liquidation) {
              this.recentLiquidations.push(liquidation);
              totalLoaded++;
            }
          }
        } catch (err: any) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ ${symbol}:`, err.message);
        }
      }
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30
      this.recentLiquidations = this.recentLiquidations.slice(-30);
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${totalLoaded} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º ${this.recentLiquidations.length})`);
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
  }

  private parseBinanceLiquidation(data: any): Liquidation | null {
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: WebSocket (data.s) –∏ REST API (data.symbol)
    const symbol = data.s || data.symbol;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É, —Ü–∏—Ñ—Ä—ã –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ USDT, BUSD –∏–ª–∏ USD
    const isValidSymbol = /^[A-Z0-9]+(USDT|BUSD|USD)$/.test(symbol);
    
    if (!isValidSymbol) {
      console.log(`–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–∏–º–≤–æ–ª: ${symbol}`);
      return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    // WebSocket: data.q, REST API: data.origQty
    const quantity = parseFloat(data.q || data.origQty);
    // WebSocket: data.p, REST API: data.price
    const price = parseFloat(data.p || data.price);
    
    if (isNaN(quantity) || isNaN(price) || quantity <= 0 || price <= 0) {
      console.log(`–ü—Ä–æ–ø—É—â–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${symbol}, q=${data.q || data.origQty}, p=${data.p || data.price}`);
      return null;
    }
    
    // WebSocket: data.E, REST API: data.time
    const timestamp = data.E || data.time || Date.now();
    // WebSocket: data.S, REST API: data.side
    const side = (data.S || data.side) === 'SELL' ? 'long' : 'short';
    
    return {
      id: `${timestamp}-${symbol}-${Math.random()}`,
      timestamp: timestamp,
      symbol: symbol,
      exchange: 'binance',
      side: side,
      size: quantity,
      price: price,
      value: quantity * price,
    };
  }

  private processLiquidation(liquidation: Liquidation) {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
    this.recentLiquidations.push(liquidation);
    if (this.recentLiquidations.length > 100) {
      this.recentLiquidations.shift();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (liquidation.side === 'long') {
      this.marketStats.totalLongs += liquidation.value;
      this.marketStats.longShortRatio.longs++;
      this.priceTracking.longsInPeriod += liquidation.value;
    } else {
      this.marketStats.totalShorts += liquidation.value;
      this.marketStats.longShortRatio.shorts++;
      this.priceTracking.shortsInPeriod += liquidation.value;
    }

    this.marketStats.activeLiquidations++;

    // üî• –ù–û–í–û–ï: –¢—Ä–µ–∫–∞–µ–º —Ü–µ–Ω—É BTC –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ delta (–±–µ—Ä–µ–º BTCUSDT –∫–∞–∫ –±–∞–∑–æ–≤—É—é)
    if (liquidation.symbol === 'BTCUSDT') {
      this.priceTracking.btcPrice = liquidation.price;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è BTC
      if (this.priceTracking.startPrice === 0) {
        this.priceTracking.startPrice = liquidation.price;
        this.priceTracking.startTime = Date.now();
      }
      
      this.calculatePriceMovementDelta();
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π 10-–π –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if (this.marketStats.activeLiquidations % 10 === 0) {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π: ${this.marketStats.activeLiquidations}, Longs: $${(this.marketStats.totalLongs/1000000).toFixed(2)}M, Shorts: $${(this.marketStats.totalShorts/1000000).toFixed(2)}M`);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–æ–≤—É—é –ª–∏–∫–≤–∏–¥–∞—Ü–∏—é
    this.broadcast({
      type: 'liquidation',
      data: liquidation
    });
  }

  // üî• –ù–û–í–û–ï: –†–∞—Å—á–µ—Ç –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
  private calculatePriceMovementDelta() {
    const currentTime = Date.now();
    const hourInMs = 60 * 60 * 1000;
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
    if (currentTime - this.priceTracking.startTime >= hourInMs) {
      const priceChange = Math.abs(this.priceTracking.btcPrice - this.priceTracking.startPrice);
      
      // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
      if (priceChange > 10) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ $10
        const longsPerDollar = this.priceTracking.longsInPeriod / priceChange;
        const shortsPerDollar = this.priceTracking.shortsInPeriod / priceChange;
        
        this.marketStats.priceMovementDelta = {
          lastPrice: this.priceTracking.btcPrice,
          priceChange: this.priceTracking.btcPrice - this.priceTracking.startPrice,
          longsPerPriceUnit: longsPerDollar,
          shortsPerPriceUnit: shortsPerDollar,
          deltaRatio: shortsPerDollar > 0 ? longsPerDollar / shortsPerDollar : 1,
        };
        
        console.log(`üí∞ Price Delta: BTC ${this.priceTracking.btcPrice.toFixed(0)}, Œî${priceChange.toFixed(0)}, Longs/$ ${longsPerDollar.toFixed(0)}, Shorts/$ ${shortsPerDollar.toFixed(0)}`);
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
      this.priceTracking.startPrice = this.priceTracking.btcPrice;
      this.priceTracking.startTime = currentTime;
      this.priceTracking.longsInPeriod = 0;
      this.priceTracking.shortsInPeriod = 0;
    }
  }

  private startStatsUpdates() {
    setInterval(() => {
      // üî• –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–∂–∏–≤—É—é" –º–µ—Ö–∞–Ω–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
      this.marketStats.activeLiquidations = Math.max(0, this.marketStats.activeLiquidations - 5);

      this.broadcast({
        type: 'marketStats',
        data: this.marketStats
      });
    }, 60000); // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
  }

  private startStatsReset() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    this.statsResetInterval = setInterval(() => {
      console.log('–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ 24 —á–∞—Å–∞');
      console.log(`–ë—ã–ª–æ: Longs=${this.marketStats.totalLongs.toFixed(2)}, Shorts=${this.marketStats.totalShorts.toFixed(2)}`);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      this.marketStats.totalLongs = 0;
      this.marketStats.totalShorts = 0;
      this.marketStats.longShortRatio.longs = 0;
      this.marketStats.longShortRatio.shorts = 0;
      this.statsStartTime = Date.now();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ —Ü–µ–Ω—ã
      this.priceTracking.startPrice = this.priceTracking.btcPrice;
      this.priceTracking.startTime = Date.now();
      this.priceTracking.longsInPeriod = 0;
      this.priceTracking.shortsInPeriod = 0;
      
      this.broadcast({
        type: 'marketStats',
        data: this.marketStats
      });
    }, 24 * 60 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
  }

  private broadcast(message: any) {
    const data = JSON.stringify(message);
    this.clients.forEach(client => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(data);
      }
    });
  }

  public getRecentLiquidations() {
    return this.recentLiquidations.slice(-50);
  }

  public getMarketStats() {
    return this.marketStats;
  }
}
